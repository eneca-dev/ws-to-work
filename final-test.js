const { makeWorksectionRequest } = require('./test-worksection');

console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –•–ï–®–ò–†–û–í–ê–ù–ò–Ø');

(async () => {
    try {
        console.log('\n‚úÖ –¢–µ—Å—Ç 1: get_tasks —Å extra=subtasks (–±—ã–ª–æ —Å–ª–æ–º–∞–Ω–æ, –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)');
        const result1 = await makeWorksectionRequest('get_tasks', {
            id_project: '129517',
            extra: 'subtasks'
        });
        
        if (result1.data.status === 'ok') {
            console.log('üéâ SUCCESS: get_tasks —Å extra=subtasks —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${result1.data.data?.length || 0}`);
        } else {
            console.log('‚ùå FAIL: get_tasks —Å extra=subtasks –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –û—à–∏–±–∫–∞: ${result1.data.message}`);
        }

        console.log('\n‚úÖ –¢–µ—Å—Ç 2: get_projects —Å extra (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ)');
        const result2 = await makeWorksectionRequest('get_projects', {
            extra: 'tags,users'
        });
        
        if (result2.data.status === 'ok') {
            console.log('üéâ SUCCESS: get_projects —Å extra —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${result2.data.data?.length || 0}`);
        } else {
            console.log('‚ùå FAIL: get_projects —Å extra –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –û—à–∏–±–∫–∞: ${result2.data.message}`);
        }

        console.log('\n‚úÖ –¢–µ—Å—Ç 3: get_tasks –±–µ–∑ extra (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ)');
        const result3 = await makeWorksectionRequest('get_tasks', {
            id_project: '129517'
        });
        
        if (result3.data.status === 'ok') {
            console.log('üéâ SUCCESS: get_tasks –±–µ–∑ extra —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${result3.data.data?.length || 0}`);
        } else {
            console.log('‚ùå FAIL: get_tasks –±–µ–∑ extra –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log(`   –û—à–∏–±–∫–∞: ${result3.data.message}`);
        }

        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê:');
        const tests = [
            { name: 'get_tasks —Å extra=subtasks', success: result1.data.status === 'ok' },
            { name: 'get_projects —Å extra', success: result2.data.status === 'ok' },
            { name: 'get_tasks –±–µ–∑ extra', success: result3.data.status === 'ok' }
        ];
        
        const passed = tests.filter(t => t.success).length;
        const total = tests.length;
        
        console.log(`‚úÖ –ü—Ä–æ—à–ª–æ —Ç–µ—Å—Ç–æ–≤: ${passed}/${total}`);
        
        if (passed === total) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! MD5 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é! üéâ');
        } else {
            console.log('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
            tests.forEach(test => {
                console.log(`   ${test.success ? '‚úÖ' : '‚ùå'} ${test.name}`);
            });
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
})(); 
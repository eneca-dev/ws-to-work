const SUPABASE_CONFIG = require('../config/supabase');

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Supabase REST API
 */
async function makeSupabaseRequest(endpoint, options = {}) {
    const url = `${SUPABASE_CONFIG.url}/rest/v1/${endpoint}`;
    
    const defaultHeaders = {
        'apikey': SUPABASE_CONFIG.anonKey,
        'Authorization': `Bearer ${SUPABASE_CONFIG.anonKey}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
    };

    const requestOptions = {
        method: 'GET',
        headers: { ...defaultHeaders, ...options.headers },
        ...options
    };

    try {
        console.log(`üîó –ó–∞–ø—Ä–æ—Å –∫ Supabase: ${url}`);
        const response = await fetch(url, requestOptions);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        return data;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase
 */
async function getAllProjects() {
    try {
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase...');
        
        const projects = await makeSupabaseRequest('projects?select=project_id,project_name,project_description,project_manager,project_lead_engineer,project_status,project_created,project_updated,external_id,external_source&order=project_created.desc');
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase`);
        return projects;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase —Ç–æ–ª—å–∫–æ —Å external_id
 */
async function getProjectsWithExternalId() {
    try {
        console.log('üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id –∏–∑ Supabase...');
        
        const projects = await makeSupabaseRequest('projects?select=project_id,project_name,project_description,project_manager,project_lead_engineer,project_status,project_created,project_updated,external_id,external_source&external_id=not.is.null&order=project_created.desc');
        
        console.log(`üîó –ü–æ–ª—É—á–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id –∏–∑ Supabase`);
        return projects;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id:', error.message);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase
 */
async function createProject(projectData) {
    try {
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Supabase: ${projectData.project_name}`);
        
        const newProject = await makeSupabaseRequest('projects', {
            method: 'POST',
            body: JSON.stringify(projectData)
        });
        
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Supabase —Å ID: ${newProject[0].project_id}`);
        return newProject[0];
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
        throw error;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ Supabase
 */
async function updateProject(projectId, updateData) {
    try {
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Supabase: ${projectId}`);
        
        const updatedProject = await makeSupabaseRequest(`projects?project_id=eq.${projectId}`, {
            method: 'PATCH',
            body: JSON.stringify(updateData)
        });
        
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase: ${projectId}`);
        return updatedProject[0];
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
 */
async function getAllUsers() {
    try {
        console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase...');
        
        const users = await makeSupabaseRequest('profiles?select=user_id,first_name,last_name,email&order=first_name.asc');
        
        console.log(`üë• –ü–æ–ª—É—á–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase`);
        return users;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
        throw error;
    }
}

/**
 * –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email (–Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫)
 */
async function findUserByName(userName, userEmail = null) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏: "${userName}"${userEmail ? ` –∏ email: "${userEmail}"` : ''}`);
        
        const users = await getAllUsers();
        console.log(`üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${users.length}`);
        
        // –ù–û–í–û–ï: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω email, —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –Ω–µ–º—É
        if (userEmail) {
            const userByEmail = users.find(user => 
                user.email && user.email.toLowerCase() === userEmail.toLowerCase()
            );
            
            if (userByEmail) {
                const fullName = `${userByEmail.first_name} ${userByEmail.last_name}`.trim();
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ email: ${fullName} (${userByEmail.email})`);
                return {
                    ...userByEmail,
                    full_name: fullName
                };
            } else {
                console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${userEmail}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏...`);
            }
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ - —É–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        const normalizedSearchName = userName
            .toLowerCase()
            .trim()
            .replace(/[^\u0400-\u04FF\u0500-\u052F\w\s]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, –ª–∞—Ç–∏–Ω–∏—Ü—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤
            .replace(/\s+/g, ' '); // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        
        console.log(`üîç –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞: "${normalizedSearchName}"`);
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        const usersWithFullName = users.map(user => {
            const fullName = `${user.first_name} ${user.last_name}`.trim();
            const reversedName = `${user.last_name} ${user.first_name}`.trim();
            return {
                ...user,
                full_name: fullName,
                reversed_name: reversedName,
                normalized_full: fullName.toLowerCase().replace(/\s+/g, ' '),
                normalized_reversed: reversedName.toLowerCase().replace(/\s+/g, ' ')
            };
        });
        
        // 1. –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ (–ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫)
        let foundUser = usersWithFullName.find(user => 
            user.normalized_full === normalizedSearchName
        );
        
        if (foundUser) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫): ${foundUser.full_name} (ID: ${foundUser.user_id})`);
            return foundUser;
        }
        
        // 2. –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
        foundUser = usersWithFullName.find(user => 
            user.normalized_reversed === normalizedSearchName
        );
        
        if (foundUser) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫): ${foundUser.full_name} (ID: ${foundUser.user_id})`);
            return foundUser;
        }
        
        console.log(`üîç –¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ...`);
        
        // 3. –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–æ–µ –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const searchParts = normalizedSearchName.split(' ').filter(part => part.length > 0);
        
        if (searchParts.length >= 2) {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –≤—Å–µ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
            foundUser = usersWithFullName.find(user => {
                const userParts = [user.first_name.toLowerCase(), user.last_name.toLowerCase()];
                return searchParts.every(searchPart => 
                    userParts.some(userPart => 
                        userPart.includes(searchPart) || searchPart.includes(userPart)
                    )
                );
            });
            
            if (foundUser) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏: ${foundUser.full_name} (ID: ${foundUser.user_id})`);
                return foundUser;
            }
        }
        
        // 4. –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        foundUser = usersWithFullName.find(user => 
            user.normalized_full.includes(normalizedSearchName) ||
            normalizedSearchName.includes(user.normalized_full) ||
            user.first_name.toLowerCase().includes(normalizedSearchName) ||
            user.last_name.toLowerCase().includes(normalizedSearchName)
        );
        
        if (foundUser) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${foundUser.full_name} (ID: ${foundUser.user_id})`);
        } else {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: "${userName}"`);
            console.log(`üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ —á–∞—Å—Ç–∏: [${searchParts.join(', ')}]`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (searchParts.length > 0) {
                const similarUsers = usersWithFullName.filter(user => 
                    searchParts.some(part => 
                        user.first_name.toLowerCase().includes(part) || 
                        user.last_name.toLowerCase().includes(part)
                    )
                ).slice(0, 5);
                
                if (similarUsers.length > 0) {
                    console.log(`üîç –ü–æ—Ö–æ–∂–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
                    similarUsers.forEach(user => {
                        console.log(`   - ${user.full_name} (${user.email})`);
                    });
                }
            }
        }
        
        return foundUser;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getAllStages() {
    try {
        console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–¥–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const stages = await makeSupabaseRequest('stages?select=*&order=stage_name.asc');
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${stages.length}`);
        return stages;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–π:', error.message);
        return [];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function createStage(stageData) {
    try {
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏: "${stageData.stage_name}"`);
        
        const newStage = await makeSupabaseRequest('stages', {
            method: 'POST',
            body: JSON.stringify(stageData)
        });
        
        console.log(`‚úÖ –°—Ç–∞–¥–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${stageData.stage_name}`);
        return newStage[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–¥–∏–∏ "${stageData.stage_name}":`, error.message);
        return null;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é
 */
async function updateStage(stageId, updateData) {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ID: ${stageId}`);
        
        const updatedStage = await makeSupabaseRequest(`stages?stage_id=eq.${stageId}`, {
            method: 'PATCH',
            body: JSON.stringify(updateData)
        });
        
        console.log(`‚úÖ –°—Ç–∞–¥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${stageId}`);
        return updatedStage[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–¥–∏–∏ ${stageId}:`, error.message);
        return null;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞–¥–∏—é –ø–æ external_id
 */
async function findStageByExternalId(externalId) {
    try {
        const stages = await makeSupabaseRequest(`stages?external_id=eq.${externalId}&select=*`);
        
        if (stages.length > 0) {
            return stages[0];
        }
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–¥–∏–∏ –ø–æ external_id ${externalId}:`, error.message);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getAllObjects() {
    try {
        console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const objects = await makeSupabaseRequest('objects?select=*&order=object_name.asc');
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
        return objects;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error.message);
        return [];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function createObject(objectData) {
    try {
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: "${objectData.object_name}"`);
        
        const newObject = await makeSupabaseRequest('objects', {
            method: 'POST',
            body: JSON.stringify(objectData)
        });
        
        console.log(`‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${objectData.object_name}`);
        return newObject[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ "${objectData.object_name}":`, error.message);
        return null;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
 */
async function updateObject(objectId, updateData) {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ID: ${objectId}`);
        
        const updatedObject = await makeSupabaseRequest(`objects?object_id=eq.${objectId}`, {
            method: 'PATCH',
            body: JSON.stringify(updateData)
        });
        
        console.log(`‚úÖ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${objectId}`);
        return updatedObject[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ ${objectId}:`, error.message);
        return null;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç –ø–æ external_id
 */
async function findObjectByExternalId(externalId) {
    try {
        const objects = await makeSupabaseRequest(`objects?external_id=eq.${externalId}&select=*`);
        
        if (objects.length > 0) {
            return objects[0];
        }
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ external_id ${externalId}:`, error.message);
        return null;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function deleteObject(objectId) {
    try {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å ID: ${objectId}`);
        
        const response = await makeSupabaseRequest(`objects?object_id=eq.${objectId}`, {
            method: 'DELETE'
        });
        
        console.log(`‚úÖ –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error.message);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function getAllSections() {
    try {
        console.log('üìë –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const sections = await makeSupabaseRequest('sections?select=*&order=section_name.asc');
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${sections.length}`);
        return sections;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error.message);
        return [];
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function createSection(sectionData) {
    try {
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: "${sectionData.section_name}"`);
        
        const newSection = await makeSupabaseRequest('sections', {
            method: 'POST',
            body: JSON.stringify(sectionData)
        });
        
        console.log(`‚úÖ –†–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω: ${sectionData.section_name}`);
        return newSection[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ "${sectionData.section_name}":`, error.message);
        return null;
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
 */
async function updateSection(sectionId, updateData) {
    try {
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ ID: ${sectionId}`);
        
        const updatedSection = await makeSupabaseRequest(`sections?section_id=eq.${sectionId}`, {
            method: 'PATCH',
            body: JSON.stringify(updateData)
        });
        
        console.log(`‚úÖ –†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${sectionId}`);
        return updatedSection[0];
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ ${sectionId}:`, error.message);
        return null;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–¥–µ–ª –ø–æ external_id
 */
async function findSectionByExternalId(externalId) {
    try {
        const sections = await makeSupabaseRequest(`sections?external_id=eq.${externalId}&select=*`);
        
        if (sections.length > 0) {
            return sections[0];
        }
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ external_id ${externalId}:`, error.message);
        return null;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function deleteSection(sectionId) {
    try {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å ID: ${sectionId}`);
        
        const response = await makeSupabaseRequest(`sections?section_id=eq.${sectionId}`, {
            method: 'DELETE'
        });
        
        console.log(`‚úÖ –†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω`);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞:', error.message);
        throw error;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
 */
async function findUserByEmail(email) {
    try {
        const users = await makeSupabaseRequest(`profiles?email=eq.${email}&select=*`);
        
        if (users.length > 0) {
            return users[0];
        }
        return null;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email ${email}:`, error.message);
        return null;
    }
}

module.exports = {
    makeSupabaseRequest,
    getAllProjects,
    getProjectsWithExternalId,
    createProject,
    updateProject,
    getAllUsers,
    findUserByName,
    findUserByEmail,
    getAllStages,
    createStage,
    updateStage,
    findStageByExternalId,
    getAllObjects,
    createObject,
    updateObject,
    findObjectByExternalId,
    deleteObject,
    getAllSections,
    createSection,
    updateSection,
    findSectionByExternalId,
    deleteSection
}; 
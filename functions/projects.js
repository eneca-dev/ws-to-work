const { makeWorksectionRequest } = require('./worksection-api');
const { getAllProjects, getProjectsWithExternalId, createProject, updateProject, findUserByName, findUserByEmail, getAllStages, createStage, updateStage, findStageByExternalId, getAllObjects, createObject, updateObject, findObjectByExternalId, deleteObject, getAllSections, createSection, updateSection, findSectionByExternalId, deleteSection } = require('./supabase-client');

/**
 * –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í –ò –í–ê–õ–ò–î–ê–¶–ò–ò
 */

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
 */
function validateProjectData(project) {
    const errors = [];
    const warnings = [];
    
    if (!project) {
        errors.push('–ü—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
        return { isValid: false, errors, warnings };
    }
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!project.id) errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞');
    if (!project.name || project.name.trim() === '') errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (project.name && project.name.length > 255) {
        warnings.push('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (project.status && !['active', 'done', 'freeze'].includes(project.status)) {
        warnings.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞: ${project.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (!project.manager_name && !project.user_to?.name) {
        warnings.push('–ù–µ –Ω–∞–π–¥–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞');
    }
    
    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–∏
 */
function validateStageData(stage, project) {
    const errors = [];
    const warnings = [];
    
    if (!stage) {
        errors.push('–°—Ç–∞–¥–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
        return { isValid: false, errors, warnings };
    }
    
    if (!stage.name || stage.name.trim() === '') errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏');
    if (!project) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ç–∞–¥–∏–∏');
    
    if (stage.name && stage.name.length > 255) {
        warnings.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ');
    }
    
    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
 */
function validateObjectData(object, stage) {
    const errors = [];
    const warnings = [];
    
    if (!object) {
        errors.push('–û–±—ä–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
        return { isValid: false, errors, warnings };
    }
    
    if (!object.name || object.name.trim() === '') errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞');
    if (!stage) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–∞–¥–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞');
    
    if (object.name && object.name.length > 255) {
        warnings.push('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (object.status && !['active', 'done', 'freeze'].includes(object.status)) {
        warnings.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞: ${object.status}`);
    }
    
    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞
 */
function validateSectionData(section, object) {
    const errors = [];
    const warnings = [];
    
    if (!section) {
        errors.push('–†–∞–∑–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
        return { isValid: false, errors, warnings };
    }
    
    if (!section.name || section.name.trim() === '') errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞');
    if (!object) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞');
    
    if (section.name && section.name.length > 255) {
        warnings.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
    if (section.date_start && section.date_end) {
        const startDate = new Date(section.date_start);
        const endDate = new Date(section.date_end);
        
        if (startDate > endDate) {
            warnings.push('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è');
        }
    }
    
    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å retry –ª–æ–≥–∏–∫–æ–π
 */
async function safeExecute(operation, operationName, maxRetries = 3, delay = 1000) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            const result = await operation();
            return {
                success: true,
                data: result,
                attempt
            };
        } catch (error) {
            console.log(`‚ùå ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
            
            if (attempt < maxRetries) {
                console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 1.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            } else {
                return {
                    success: false,
                    error: error.message,
                    attempts: maxRetries
                };
            }
        }
    }
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 */
function createLogger(context) {
    return {
        info: (message, details = null) => {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] [${context}] ‚ÑπÔ∏è ${message}`);
            if (details) console.log('   üìù –î–µ—Ç–∞–ª–∏:', details);
        },
        warning: (message, details = null) => {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] [${context}] ‚ö†Ô∏è ${message}`);
            if (details) console.log('   üìù –î–µ—Ç–∞–ª–∏:', details);
        },
        error: (message, error = null) => {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] [${context}] ‚ùå ${message}`);
            if (error) {
                console.log('   üîç –û—à–∏–±–∫–∞:', error.message || error);
                if (error.stack) console.log('   üìö Stack:', error.stack);
            }
        },
        success: (message, details = null) => {
            const timestamp = new Date().toISOString();
            console.log(`[${timestamp}] [${context}] ‚úÖ ${message}`);
            if (details) console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', details);
        }
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
 */
async function validateHierarchyConsistency() {
    const logger = createLogger('–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏');
    const issues = [];
    
    try {
        logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        const projects = await getAllProjects();
        logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–¥–∏–∏
        const stages = await getAllStages();
        logger.info(`–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${stages.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned —Å—Ç–∞–¥–∏–∏ (—Å—Ç–∞–¥–∏–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤)
        const orphanedStages = stages.filter(stage => 
            !projects.some(project => project.project_id === stage.stage_project_id)
        );
        
        if (orphanedStages.length > 0) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${orphanedStages.length} —Å—Ç–∞–¥–∏–π –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤`);
            logger.warning(`Orphaned —Å—Ç–∞–¥–∏–∏:`, orphanedStages.map(s => s.stage_name));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç—ã
        const objects = await getAllObjects();
        logger.info(`–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${objects.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned –æ–±—ä–µ–∫—Ç—ã
        const orphanedObjects = objects.filter(object => 
            !stages.some(stage => stage.stage_id === object.object_stage_id)
        );
        
        if (orphanedObjects.length > 0) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${orphanedObjects.length} –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∞–¥–∏–π`);
            logger.warning(`Orphaned –æ–±—ä–µ–∫—Ç—ã:`, orphanedObjects.map(o => o.object_name));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª—ã
        const sections = await getAllSections();
        logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${sections.length}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned —Ä–∞–∑–¥–µ–ª—ã
        const orphanedSections = sections.filter(section => 
            !objects.some(object => object.object_id === section.section_object_id)
        );
        
        if (orphanedSections.length > 0) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${orphanedSections.length} —Ä–∞–∑–¥–µ–ª–æ–≤ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤`);
            logger.warning(`Orphaned —Ä–∞–∑–¥–µ–ª—ã:`, orphanedSections.map(s => s.section_name));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã external_id
        const duplicateExternalIds = {};
        
        [...projects, ...stages, ...objects, ...sections].forEach(item => {
            if (item.external_id) {
                const key = `${item.external_source || 'unknown'}_${item.external_id}`;
                if (!duplicateExternalIds[key]) {
                    duplicateExternalIds[key] = [];
                }
                duplicateExternalIds[key].push(item);
            }
        });
        
        const duplicates = Object.entries(duplicateExternalIds).filter(([key, items]) => items.length > 1);
        if (duplicates.length > 0) {
            issues.push(`–ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è external_id`);
            logger.warning('–î—É–±–ª–∏–∫–∞—Ç—ã external_id:', duplicates);
        }
        
        logger.success(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${issues.length}`);
        
        return {
            success: true,
            issues,
            statistics: {
                projects: projects.length,
                stages: stages.length,
                objects: objects.length,
                sections: sections.length,
                orphaned_stages: orphanedStages.length,
                orphaned_objects: orphanedObjects.length,
                orphaned_sections: orphanedSections.length,
                duplicate_external_ids: duplicates.length
            }
        };
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏', error);
        return {
            success: false,
            error: error.message,
            issues
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection —Å –º–µ—Ç–∫–æ–π "eneca.work sync"
 */
async function getProjectsWithSyncTag() {
    try {
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π "eneca.work sync"...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Ç–µ–≥–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        const allProjects = await makeWorksectionRequest('get_projects', {
            extra: 'tags,users'  // –í–∫–ª—é—á–∞–µ–º —Ç–µ–≥–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç
        });
        
        console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', JSON.stringify(allProjects, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        let projectsData = null;
        if (allProjects.data && allProjects.data.data && Array.isArray(allProjects.data.data)) {
            projectsData = allProjects.data.data;
        } else if (allProjects.data && Array.isArray(allProjects.data)) {
            projectsData = allProjects.data;
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—Å–µ–≥–æ: ${projectsData.length}`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –Ω—É–∂–Ω–æ–π –º–µ—Ç–∫–æ–π
        const syncProjects = [];
        
        for (const project of projectsData) {
            console.log(`üîç –ü—Ä–æ–µ–∫—Ç: ${project.name}, —Ç–µ–≥–∏:`, JSON.stringify(project.tags, null, 2));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–∫ —É –ø—Ä–æ–µ–∫—Ç–∞
            let hasSyncTag = false;
            
            if (project.tags) {
                // –ï—Å–ª–∏ —Ç–µ–≥–∏ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
                if (Array.isArray(project.tags)) {
                    hasSyncTag = project.tags.some(tag => 
                        (tag.title && tag.title.includes('eneca.work sync')) ||
                        (tag.name && tag.name.includes('eneca.work sync')) ||
                        (tag.id && tag.id === '230964') ||
                        (typeof tag === 'string' && tag.includes('eneca.work sync'))
                    );
                }
                // –ï—Å–ª–∏ —Ç–µ–≥–∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ id: name (–∫–∞–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
                else if (typeof project.tags === 'object') {
                    hasSyncTag = Object.values(project.tags).some(tagName => 
                        tagName && tagName.includes('eneca.work sync')
                    ) || Object.keys(project.tags).includes('230964');
                }
                // –ï—Å–ª–∏ —Ç–µ–≥–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                else if (typeof project.tags === 'string') {
                    hasSyncTag = project.tags.includes('eneca.work sync');
                }
            }
            
            if (hasSyncTag) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç —Å sync —Ç–µ–≥–æ–º: ${project.name}`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
                let managerName = null;
                let managerEmail = null;
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ user_to –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–Ω–µ "–ë–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è")
                if (project.user_to && project.user_to.name && 
                    project.user_to.id !== "0" && 
                    project.user_to.name !== "–ë–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è" &&
                    project.user_to.email !== "NOONE") {
                    managerName = project.user_to.name;
                    managerEmail = project.user_to.email;
                    console.log(`üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (user_to): ${managerName} (${managerEmail})`);
                } else {
                    // Fallback: –∏—â–µ–º —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
                    if (project.users && Array.isArray(project.users)) {
                        // –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä)
                        const manager = project.users.find(user => 
                            user.role === 'admin' || user.role === 'manager' || user.is_admin
                        );
                        if (manager) {
                            managerName = manager.name || `${manager.first_name || ''} ${manager.last_name || ''}`.trim();
                            managerEmail = manager.email;
                        }
                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∞–¥–º–∏–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (!managerName && project.users.length > 0) {
                            const firstUser = project.users[0];
                            managerName = firstUser.name || `${firstUser.first_name || ''} ${firstUser.last_name || ''}`.trim();
                            managerEmail = firstUser.email;
                        }
                    }
                    console.log(`üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (fallback): ${managerName} (${managerEmail})`);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
                syncProjects.push({
                    ...project,
                    manager_name: managerName,
                    manager_email: managerEmail,
                    company: project.company || project.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º company –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ fallback
                    company_id: project.company_id || project.id // –ò—Å–ø–æ–ª—å–∑—É–µ–º company_id –∏–ª–∏ id –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞–∫ fallback
                });
                
                if (managerName) {
                    console.log(`üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: ${managerName}`);
                } else {
                    console.log(`‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            }
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${syncProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π "eneca.work sync"`);

        return {
            success: true,
            data: syncProjects,
            filtered_from: projectsData.length,
            message: `–ù–∞–π–¥–µ–Ω–æ ${syncProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π –∏–∑ ${projectsData.length} –æ–±—â–∏—Ö`
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å sync —Ç–µ–≥–æ–º:', error.message);
        return {
            success: false,
            error: error.message,
            data: []
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API
 */
async function getProjectTags() {
    try {
        console.log('üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const tagsResponse = await makeWorksectionRequest('get_project_tags', {});
        
        console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API —Ç–µ–≥–æ–≤:', JSON.stringify(tagsResponse, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–≥–æ–≤
        let tagsData = null;
        if (tagsResponse.data && tagsResponse.data.data && Array.isArray(tagsResponse.data.data)) {
            tagsData = tagsResponse.data.data;
        } else if (tagsResponse.data && Array.isArray(tagsResponse.data)) {
            tagsData = tagsResponse.data;
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tagsData.length} —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤`);

        return {
            success: true,
            data: tagsData,
            message: `–ù–∞–π–¥–µ–Ω–æ ${tagsData.length} —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤`
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error.message);
        return {
            success: false,
            error: error.message,
            data: []
        };
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ–≥ "eneca.work sync" –≤ Worksection —á–µ—Ä–µ–∑ API
 */
async function createSyncTag() {
    try {
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ "eneca.work sync"...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–µ–≥
        const existingTags = await getProjectTags();
        
        if (existingTags.success && existingTags.data) {
            const syncTagExists = existingTags.data.some(tag => 
                tag.title === 'eneca.work sync'
            );
            
            if (syncTagExists) {
                console.log('‚úÖ –¢–µ–≥ "eneca.work sync" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return { 
                    success: true, 
                    message: '–¢–µ–≥ "eneca.work sync" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                    exists: true
                };
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Ç–µ–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≥—Ä—É–ø–ø–µ
        const tagGroups = await makeWorksectionRequest('get_project_tag_groups', {});
        
        let groupId = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'; // –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –≥—Ä—É–ø–ø —Ç–µ–≥–æ–≤
        let groupsData = null;
        if (tagGroups.data && tagGroups.data.data && Array.isArray(tagGroups.data.data)) {
            groupsData = tagGroups.data.data;
        } else if (tagGroups.data && Array.isArray(tagGroups.data)) {
            groupsData = tagGroups.data;
        }

        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        if (groupsData && groupsData.length > 0) {
            const syncGroup = groupsData.find(group => 
                group.title.includes('sync') || 
                group.title.includes('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è') ||
                group.type === 'label'
            );
            
            if (syncGroup) {
                groupId = syncGroup.id;
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É —Ç–∏–ø–∞ label
                const labelGroup = groupsData.find(group => group.type === 'label');
                if (labelGroup) {
                    groupId = labelGroup.id;
                }
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ —á–µ—Ä–µ–∑ API
        console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤ –≥—Ä—É–ø–ø–µ: ${groupId}`);
        const createResponse = await makeWorksectionRequest('add_project_tags', {
            title: 'eneca.work sync',
            group: groupId
        });
        
        if (createResponse.status === 'ok' && createResponse.data) {
            console.log('‚úÖ –¢–µ–≥ "eneca.work sync" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            return {
                success: true,
                data: createResponse.data,
                message: '–¢–µ–≥ "eneca.work sync" —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
            };
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–≥');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞:', error.message);
        
        // –ï—Å–ª–∏ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        if (error.message.includes('Unknown action') || error.message.includes('not found')) {
            return {
                success: false,
                error: 'API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥ "eneca.work sync" –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Worksection',
                message: '–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥ –≤—Ä—É—á–Ω—É—é –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ'
            };
        }
        
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
 */
async function getProjectDetails(projectId) {
    try {
        console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}...`);
        
        const response = await makeWorksectionRequest('get_project', {
            project: projectId
        });
        
        if (!response.data) {
            throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return {
            success: true,
            data: response.data
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã —Å –º–µ—Ç–∫–æ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö eneca.work
 */
async function syncProjectsToDatabase() {
    try {
        console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ë–î...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –º–µ—Ç–∫–æ–π sync
        const projectsResult = await getProjectsWithSyncTag();
        
        if (!projectsResult.success || projectsResult.data.length === 0) {
            return {
                success: false,
                error: '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π "eneca.work sync" –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
                synchronized: 0
            };
        }

        const projects = projectsResult.data;
        console.log(`üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤...`);

        // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –≤ Supabase –ë–î
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
        
        let synchronized = 0;
        
        for (const project of projects) {
            try {
                // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                console.log(`‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: ${project.name} (ID: ${project.id})`);
                
                // TODO: –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ MAPPING.md
                // TODO: –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—ã managers/projects —á–µ—Ä–µ–∑ Supabase
                
                synchronized++;
                
            } catch (projectError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project.id}:`, projectError.message);
            }
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${synchronized}/${projects.length}`);

        return {
            success: true,
            synchronized: synchronized,
            total: projects.length,
            message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${synchronized} –∏–∑ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –ë–î:', error.message);
        return {
            success: false,
            error: error.message,
            synchronized: 0
        };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã Worksection —Å Supabase
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Supabase
 */
async function syncProjectsToSupabase() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º –∏–∑ Worksection
        const wsProjectsResponse = await getProjectsWithSyncTag();
        if (!wsProjectsResponse.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection');
        }
        
        const wsProjects = wsProjectsResponse.data;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${wsProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Worksection —Å sync —Ç–µ–≥–æ–º`);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase —Å external_id
        const supabaseProjects = await getSupabaseProjectsWithExternalId();
        console.log(`üóÑÔ∏è –ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase —Å external_id`);
        
        const results = {
            found: [],      // –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            created: [],    // –°–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ
            errors: []      // –û—à–∏–±–∫–∏
        };
        
        // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ Worksection
        for (const wsProject of wsProjects) {
            try {
                console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: ${wsProject.name} (ID: ${wsProject.id})`);
                
                // –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ external_id
                const existingProject = supabaseProjects.find(
                    p => p.external_id === wsProject.id.toString()
                );
                
                if (existingProject) {
                    // –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Supabase: ${existingProject.project_name}`);
                    results.found.push({
                        wsProject,
                        supabaseProject: existingProject,
                        status: 'found'
                    });
                } else {
                    // –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase...`);
                    const newProject = await createProjectInSupabase(wsProject);
                    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${newProject.project_name}`);
                    results.created.push({
                        wsProject,
                        supabaseProject: newProject,
                        status: 'created'
                    });
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${wsProject.name}:`, error.message);
                results.errors.push({
                    wsProject,
                    error: error.message
                });
            }
        }
        
        console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –Ω–∞–π–¥–µ–Ω–æ ${results.found.length}, —Å–æ–∑–¥–∞–Ω–æ ${results.created.length}, –æ—à–∏–±–æ–∫ ${results.errors.length}`);
        
        return {
            success: true,
            data: results,
            summary: {
                total: wsProjects.length,
                found: results.found.length,
                created: results.created.length,
                errors: results.errors.length
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase —Å external_id
 */
async function getSupabaseProjectsWithExternalId() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Supabase API
        const supabaseProjects = await getProjectsWithExternalId();
        return supabaseProjects;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase:', error.message);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Worksection
 * –°–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É: Worksection Project ‚Üí Manager + Project
 */
async function createProjectInSupabase(wsProject) {
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Supabase: ${wsProject.name}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ Manager'–æ–≤ (—Ç–∞–∫ –∫–∞–∫ –∏—Ö –Ω–µ—Ç –≤ –ë–î)
    const projectData = {
        project_name: wsProject.name,
        project_description: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Worksection. ${wsProject.description || ''}`.trim(),
        external_id: wsProject.id.toString(),
        external_source: 'worksection',
        external_updated_at: new Date().toISOString(),
        project_status: mapWorksectionStatus(wsProject.status),
    };
    
    // –ò—â–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç (project_manager)
    if (wsProject.manager_name) {
        console.log(`üë§ –ò—â–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –ø—Ä–æ–µ–∫—Ç: ${wsProject.manager_name}`);
        const foundUser = await findUserByName(wsProject.manager_name, wsProject.manager_email);
        if (foundUser) {
            projectData.project_manager = foundUser.user_id;
            console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${foundUser.full_name} (ID: ${foundUser.user_id})`);
        } else {
            console.log(`‚ö†Ô∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${wsProject.manager_name}`);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ Supabase
    const newProject = await createProject(projectData);
    
    console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${newProject.project_name} (ID: ${newProject.project_id})`);
    
    return newProject;
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Worksection –≤ —Å—Ç–∞—Ç—É—Å—ã eneca.work
 */
function mapWorksectionStatus(wsStatus) {
    const statusMap = {
        'active': 'active',
        'completed': 'archive',
        'paused': 'paused',
        'cancelled': 'canceled'
    };
    
    return statusMap[wsStatus] || 'active';
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤ Supabase –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Worksection
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
 */
async function updateProjectsFromWorksection() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º –∏–∑ Worksection
        const wsProjectsResponse = await getProjectsWithSyncTag();
        if (!wsProjectsResponse.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection');
        }
        
        const wsProjects = wsProjectsResponse.data;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${wsProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Worksection —Å sync —Ç–µ–≥–æ–º`);
        
        // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase —Å external_id
        const supabaseProjects = await getSupabaseProjectsWithExternalId();
        console.log(`üóÑÔ∏è –ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase —Å external_id`);
        
        const results = {
            updated: [],    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            notFound: [],   // –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase
            errors: []      // –û—à–∏–±–∫–∏
        };
        
        // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ Worksection
        for (const wsProject of wsProjects) {
            try {
                console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: ${wsProject.name} (ID: ${wsProject.id})`);
                
                // –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ external_id
                const existingProject = supabaseProjects.find(
                    p => p.external_id === wsProject.id.toString()
                );
                
                if (!existingProject) {
                    console.log(`‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase: ${wsProject.name}`);
                    results.notFound.push({
                        wsProject,
                        reason: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase'
                    });
                    continue;
                }
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const updateData = {
                    external_updated_at: new Date().toISOString()
                };
                
                let hasChanges = false;
                
                // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                const projectChanges = [];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if (existingProject.project_name !== wsProject.name) {
                    const nameChange = {
                        field: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                        old_value: existingProject.project_name,
                        new_value: wsProject.name
                    };
                    projectChanges.push(nameChange);
                    console.log(`üìù [${wsProject.name}] –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: "${existingProject.project_name}" ‚Üí "${wsProject.name}"`);
                    updateData.project_name = wsProject.name;
                    hasChanges = true;
                }
                
                // –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ email (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö Worksection)
                if (wsProject.manager_name) {
                    console.log(`üë§ [${wsProject.name}] –ò—â–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞: "${wsProject.manager_name}"${wsProject.manager_email ? ` (${wsProject.manager_email})` : ''}`);
                    const foundManager = await findUserByName(wsProject.manager_name, wsProject.manager_email);
                    
                    if (foundManager) {
                        if (existingProject.project_manager !== foundManager.user_id) {
                            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
                            let currentManagerName = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
                            if (existingProject.project_manager) {
                                try {
                                    const { getAllUsers } = require('./supabase-client');
                                    const allUsers = await getAllUsers();
                                    const currentManager = allUsers.find(u => u.user_id === existingProject.project_manager);
                                    if (currentManager) {
                                        currentManagerName = `${currentManager.first_name} ${currentManager.last_name}`.trim();
                                    }
                                } catch (err) {
                                    console.log(`‚ö†Ô∏è [${wsProject.name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞`);
                                }
                            }
                            
                            const managerChange = {
                                field: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞',
                                old_value: currentManagerName,
                                new_value: foundManager.full_name
                            };
                            projectChanges.push(managerChange);
                            console.log(`üë§ [${wsProject.name}] –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞: "${currentManagerName}" ‚Üí "${foundManager.full_name}" (ID: ${foundManager.user_id})`);
                            updateData.project_manager = foundManager.user_id;
                            hasChanges = true;
                        } else {
                            console.log(`üë§ [${wsProject.name}] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: ${foundManager.full_name}`);
                        }
                    } else {
                        console.log(`‚ö†Ô∏è [${wsProject.name}] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase: "${wsProject.manager_name}"`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è [${wsProject.name}] –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –≤ Worksection`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (hasChanges) {
                    console.log(`üíæ [${wsProject.name}] –ü—Ä–∏–º–µ–Ω—è–µ–º ${projectChanges.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π...`);
                    projectChanges.forEach(change => {
                        console.log(`   üîÑ ${change.field}: "${change.old_value}" ‚Üí "${change.new_value}"`);
                    });
                    
                    const updatedProject = await updateProject(existingProject.project_id, updateData);
                    
                    results.updated.push({
                        wsProject,
                        supabaseProject: existingProject,
                        updatedProject,
                        changes: projectChanges,
                        updateData: updateData,
                        status: 'updated'
                    });
                    
                    console.log(`‚úÖ [${wsProject.name}] –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                } else {
                    console.log(`‚úÖ [${wsProject.name}] –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç—É–∞–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç`);
                    results.updated.push({
                        wsProject,
                        supabaseProject: existingProject,
                        status: 'no_changes'
                    });
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${wsProject.name}:`, error.message);
                results.errors.push({
                    wsProject,
                    error: error.message
                });
            }
        }
        
        console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const actuallyUpdated = results.updated.filter(item => item.status === 'updated');
        const noChanges = results.updated.filter(item => item.status === 'no_changes');
        
        console.log(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${wsProjects.length}`);
        console.log(`   üîÑ –ü—Ä–æ–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${actuallyUpdated.length}`);
        console.log(`   üìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${noChanges.length}`);
        console.log(`   ‚ùì –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Supabase: ${results.notFound.length}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if (actuallyUpdated.length > 0) {
            console.log(`\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:`);
            actuallyUpdated.forEach(item => {
                console.log(`   üìã "${item.wsProject.name}"`);
                if (item.changes && item.changes.length > 0) {
                    item.changes.forEach(change => {
                        console.log(`      üîÑ ${change.field}: "${change.old_value}" ‚Üí "${change.new_value}"`);
                    });
                }
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (noChanges.length > 0) {
            console.log(`\n‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`);
            noChanges.forEach(item => {
                console.log(`   üìã "${item.wsProject.name}"`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
        if (results.notFound.length > 0) {
            console.log(`\n‚ùì –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase:`);
            results.notFound.forEach(item => {
                console.log(`   üìã "${item.wsProject.name}" (ID: ${item.wsProject.id})`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if (results.errors.length > 0) {
            console.log(`\n‚ùå –û—à–∏–±–∫–∏:`);
            results.errors.forEach(item => {
                console.log(`   üìã "${item.wsProject.name}": ${item.error}`);
            });
        }
        
        return {
            success: true,
            data: results,
            summary: {
                total: wsProjects.length,
                updated: results.updated.length,
                notFound: results.notFound.length,
                errors: results.errors.length
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–¥–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –º–µ—Ç–æ–∫ Worksection –≤ Supabase
 */
async function syncStagesFromWorksection() {
    try {
        console.log('üè∑Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞–¥–∏–π –∏–∑ –º–µ—Ç–æ–∫ Worksection...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º
        const wsProjectsResult = await getProjectsWithSyncTag();
        if (!wsProjectsResult.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: ${wsProjectsResult.error}`);
        }
        
        const wsProjects = wsProjectsResult.data;
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${wsProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase
        const supabaseProjects = await getProjectsWithExternalId();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ Supabase
        const existingStages = await getAllStages();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingStages.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–¥–∏–π –≤ Supabase`);
        
        const results = {
            created: [],
            updated: [],
            unchanged: [],
            errors: []
        };
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
        for (const wsProject of wsProjects) {
            try {
                console.log(`\nüîç [${wsProject.name}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...`);
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase
                const supabaseProject = supabaseProjects.find(
                    p => p.external_id === wsProject.id.toString()
                );
                
                if (!supabaseProject) {
                    console.log(`‚ö†Ô∏è [${wsProject.name}] –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
                if (!wsProject.tags || typeof wsProject.tags !== 'object') {
                    console.log(`‚ö†Ô∏è [${wsProject.name}] –£ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç –º–µ—Ç–æ–∫`);
                    continue;
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç–∫—É
                for (const [tagId, tagName] of Object.entries(wsProject.tags)) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–∫–∞ —Å—Ç–∞–¥–∏–µ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–°—Ç–∞–¥–∏—è")
                    if (tagName && tagName.toLowerCase().includes('—Å—Ç–∞–¥–∏—è')) {
                        console.log(`üè∑Ô∏è [${wsProject.name}] –ù–∞–π–¥–µ–Ω–∞ –º–µ—Ç–∫–∞ —Å—Ç–∞–¥–∏–∏: "${tagName}" (ID: ${tagId})`);
                        
                        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é –ø–æ external_id –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                        let existingStage = await findStageByExternalId(tagId, supabaseProject.project_id);
                        
                        if (existingStage) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏
                            if (existingStage.stage_name !== tagName) {
                                console.log(`üîÑ [${wsProject.name}] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é: "${existingStage.stage_name}" ‚Üí "${tagName}"`);
                                
                                const updateData = {
                                    stage_name: tagName,
                                    external_updated_at: new Date().toISOString()
                                };
                                
                                const updatedStage = await updateStage(existingStage.stage_id, updateData);
                                
                                if (updatedStage) {
                                    results.updated.push({
                                        stage: updatedStage,
                                        project: wsProject,
                                        changes: {
                                            old_name: existingStage.stage_name,
                                            new_name: tagName
                                        }
                                    });
                                    console.log(`‚úÖ [${wsProject.name}] –°—Ç–∞–¥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: "${tagName}"`);
                                } else {
                                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–¥–∏—é "${tagName}"`);
                                }
                            } else {
                                console.log(`‚úÖ [${wsProject.name}] –°—Ç–∞–¥–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: "${tagName}"`);
                                results.unchanged.push({
                                    stage: existingStage,
                                    project: wsProject
                                });
                            }
                        } else {
                            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é
                            console.log(`üÜï [${wsProject.name}] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é: "${tagName}"`);
                            
                            const stageData = {
                                stage_name: tagName,
                                stage_description: `–°—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ Worksection (–º–µ—Ç–∫–∞: ${tagName})`,
                                stage_project_id: supabaseProject.project_id,
                                external_id: tagId,
                                external_source: 'worksection',
                                external_updated_at: new Date().toISOString()
                            };
                            
                            const newStage = await createStage(stageData);
                            
                            if (newStage) {
                                results.created.push({
                                    stage: newStage,
                                    project: wsProject,
                                    tag_id: tagId
                                });
                                console.log(`‚úÖ [${wsProject.name}] –°—Ç–∞–¥–∏—è —Å–æ–∑–¥–∞–Ω–∞: "${tagName}" (ID: ${newStage.stage_id})`);
                            } else {
                                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–¥–∏—é "${tagName}"`);
                            }
                        }
                    }
                }
                
            } catch (error) {
                console.error(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–¥–∏–π:`, error.message);
                results.errors.push({
                    project: wsProject,
                    error: error.message
                });
            }
        }
        
        console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π:`);
        console.log(`   üÜï –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞–¥–∏–π: ${results.created.length}`);
        console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–¥–∏–π: ${results.updated.length}`);
        console.log(`   ‚úÖ –°—Ç–∞–¥–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${results.unchanged.length}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
        if (results.created.length > 0) {
            console.log(`\nüÜï –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏:`);
            results.created.forEach(item => {
                console.log(`   üìã "${item.stage.stage_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}"`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
        if (results.updated.length > 0) {
            console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏:`);
            results.updated.forEach(item => {
                console.log(`   üìã "${item.changes.old_name}" ‚Üí "${item.changes.new_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}"`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if (results.errors.length > 0) {
            console.log(`\n‚ùå –û—à–∏–±–∫–∏:`);
            results.errors.forEach(item => {
                console.log(`   üìã –ü—Ä–æ–µ–∫—Ç "${item.project.name}": ${item.error}`);
            });
        }
        
        return {
            success: true,
            data: results,
            summary: {
                created: results.created.length,
                updated: results.updated.length,
                unchanged: results.unchanged.length,
                errors: results.errors.length
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã (–∑–∞–¥–∞—á–∏) –∏–∑ Worksection –≤ Supabase
 */
async function syncObjectsFromWorksection() {
    try {
        console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∑–∞–¥–∞—á Worksection...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º
        const wsProjectsResult = await getProjectsWithSyncTag();
        if (!wsProjectsResult.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: ${wsProjectsResult.error}`);
        }
        
        const wsProjects = wsProjectsResult.data;
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${wsProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Supabase
        const supabaseProjects = await getProjectsWithExternalId();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ Supabase
        const existingStages = await getAllStages();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingStages.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–¥–∏–π –≤ Supabase`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ Supabase
        const existingObjects = await getAllObjects();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingObjects.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ Supabase`);
        
        const results = {
            created: [],
            updated: [],
            unchanged: [],
            errors: []
        };
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
        for (const wsProject of wsProjects) {
            try {
                console.log(`\nüîç [${wsProject.name}] –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞...`);
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –≤ Supabase
                const supabaseProject = supabaseProjects.find(
                    p => p.external_id === wsProject.id.toString()
                );
                
                if (!supabaseProject) {
                    console.log(`‚ö†Ô∏è [${wsProject.name}] –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Worksection
                const tasksResponse = await makeWorksectionRequest('get_tasks', {
                    id_project: wsProject.id
                });
                
                if (tasksResponse.statusCode !== 200 || tasksResponse.data.status !== 'ok') {
                    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${tasksResponse.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                }
                
                const allTasks = tasksResponse.data.data || [];
                console.log(`üìã [${wsProject.name}] –ù–∞–π–¥–µ–Ω–æ ${allTasks.length} –∑–∞–¥–∞—á –≤—Å–µ–≥–æ`);
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏: —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ (active) –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
                const wsTasks = allTasks.filter(task => {
                    const isActive = task.status === 'active';
                    const notExclamation = !task.name.startsWith('!');
                    
                    if (!isActive) {
                        console.log(`‚è≠Ô∏è [${wsProject.name}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—É—é –∑–∞–¥–∞—á—É: "${task.name}" (—Å—Ç–∞—Ç—É—Å: ${task.status})`);
                        return false;
                    }
                    
                    if (!notExclamation) {
                        console.log(`‚è≠Ô∏è [${wsProject.name}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å "!": "${task.name}"`);
                        return false;
                    }
                    
                    return true;
                });
                
                console.log(`‚úÖ [${wsProject.name}] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${wsTasks.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                const projectObjects = existingObjects.filter(obj => 
                    obj.object_project_id === supabaseProject.project_id && 
                    obj.external_id !== null
                );
                
                for (const existingObject of projectObjects) {
                    const correspondingTask = allTasks.find(task => task.id.toString() === existingObject.external_id);
                    
                    if (!correspondingTask) {
                        console.log(`üóëÔ∏è [${wsProject.name}] –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ "${existingObject.object_name}", –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç`);
                        continue;
                    }
                    
                    const shouldKeep = correspondingTask.status === 'active' && !correspondingTask.name.startsWith('!');
                    
                    if (!shouldKeep) {
                        console.log(`üóëÔ∏è [${wsProject.name}] –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç "${existingObject.object_name}" (–∑–∞–¥–∞—á–∞: "${correspondingTask.name}", —Å—Ç–∞—Ç—É—Å: ${correspondingTask.status})`);
                        
                        try {
                            await deleteObject(existingObject.object_id);
                            results.deleted = results.deleted || [];
                            results.deleted.push({
                                object: existingObject,
                                task: correspondingTask,
                                project: wsProject,
                                reason: correspondingTask.status !== 'active' ? '–∑–∞–∫—Ä—ã—Ç–∞' : '–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å !'
                            });
                            console.log(`‚úÖ [${wsProject.name}] –û–±—ä–µ–∫—Ç "${existingObject.object_name}" —É–¥–∞–ª–µ–Ω`);
                        } catch (error) {
                            console.error(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ "${existingObject.object_name}":`, error.message);
                            results.errors.push({
                                object: existingObject,
                                task: correspondingTask,
                                project: wsProject,
                                error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`
                            });
                        }
                    }
                }
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                for (const wsTask of wsTasks) {
                    try {
                        console.log(`\nüìù [${wsProject.name}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: "${wsTask.name}" (ID: ${wsTask.id})`);
                        
                        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –ø–æ external_id –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                        let existingObject = await findObjectByExternalId(wsTask.id.toString(), supabaseProject.project_id);
                        
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                        let targetStageId = null;
                        
                        // 1. –ò—â–µ–º —Å—Ç–∞–¥–∏—é –ø–æ –º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (wsTask.tags && typeof wsTask.tags === 'object') {
                            for (const [tagId, tagName] of Object.entries(wsTask.tags)) {
                                const matchingStage = existingStages.find(
                                    stage => stage.external_id === tagId && 
                                            stage.stage_project_id === supabaseProject.project_id
                                );
                                if (matchingStage) {
                                    targetStageId = matchingStage.stage_id;
                                    console.log(`üè∑Ô∏è [${wsProject.name}] –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–¥–∏—è –ø–æ –º–µ—Ç–∫–µ "${tagName}": "${matchingStage.stage_name}"`);
                                    break;
                                }
                            }
                        }
                        
                        // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –º–µ—Ç–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—É—é —Å—Ç–∞–¥–∏—é –ø—Ä–æ–µ–∫—Ç–∞
                        if (!targetStageId) {
                            const projectStages = existingStages.filter(
                                stage => stage.stage_project_id === supabaseProject.project_id
                            );
                            if (projectStages.length > 0) {
                                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å—Ç–∞–¥–∏–∏ —Å external_id, –ø–æ—Ç–æ–º –ª—é–±—ã–µ
                                const stageWithExternal = projectStages.find(s => s.external_id !== null);
                                targetStageId = (stageWithExternal || projectStages[0]).stage_id;
                                console.log(`üìã [${wsProject.name}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–¥–∏—é: "${(stageWithExternal || projectStages[0]).stage_name}"`);
                            } else {
                                console.log(`‚ö†Ô∏è [${wsProject.name}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–¥–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É`);
                                continue;
                            }
                        }
                        
                        if (existingObject) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç
                            const needsUpdate = 
                                existingObject.object_name !== wsTask.name ||
                                existingObject.object_description !== (wsTask.text || '') ||
                                existingObject.object_stage_id !== targetStageId;
                            
                            if (needsUpdate) {
                                console.log(`üîÑ [${wsProject.name}] –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç: "${wsTask.name}"`);
                                
                                const updateData = {
                                    object_name: wsTask.name,
                                    object_description: wsTask.text || '',
                                    object_stage_id: targetStageId,
                                    external_updated_at: new Date().toISOString()
                                };
                                
                                const updatedObject = await updateObject(existingObject.object_id, updateData);
                                
                                if (updatedObject) {
                                    results.updated.push({
                                        object: updatedObject,
                                        task: wsTask,
                                        project: wsProject
                                    });
                                    console.log(`‚úÖ [${wsProject.name}] –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: "${wsTask.name}"`);
                                } else {
                                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç "${wsTask.name}"`);
                                }
                            } else {
                                console.log(`‚úÖ [${wsProject.name}] –û–±—ä–µ–∫—Ç –∞–∫—Ç—É–∞–ª–µ–Ω: "${wsTask.name}"`);
                                results.unchanged.push({
                                    object: existingObject,
                                    task: wsTask,
                                    project: wsProject
                                });
                            }
                        } else {
                            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                            console.log(`üÜï [${wsProject.name}] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç: "${wsTask.name}"`);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å project_id –º–µ–∂–¥—É —Å—Ç–∞–¥–∏–µ–π –∏ –æ–±—ä–µ–∫—Ç–æ–º
                            const targetStage = existingStages.find(s => s.stage_id === targetStageId);
                            if (targetStage && targetStage.stage_project_id !== supabaseProject.project_id) {
                                console.log(`‚ö†Ô∏è [${wsProject.name}] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å project_id: —Å—Ç–∞–¥–∏—è ${targetStage.stage_project_id} vs –ø—Ä–æ–µ–∫—Ç ${supabaseProject.project_id}`);
                            }

                            const objectData = {
                                object_name: wsTask.name,
                                object_description: wsTask.text || '',
                                object_stage_id: targetStageId,
                                object_project_id: supabaseProject.project_id, // –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å –ë–î
                                external_id: wsTask.id.toString(),
                                external_source: 'worksection',
                                external_updated_at: new Date().toISOString()
                            };
                            
                            const newObject = await createObject(objectData);
                            
                            if (newObject) {
                                results.created.push({
                                    object: newObject,
                                    task: wsTask,
                                    project: wsProject
                                });
                                console.log(`‚úÖ [${wsProject.name}] –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: "${wsTask.name}" (ID: ${newObject.object_id})`);
                            } else {
                                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç "${wsTask.name}"`);
                            }
                        }
                        
                    } catch (error) {
                        console.error(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ "${wsTask.name}":`, error.message);
                        results.errors.push({
                            task: wsTask,
                            project: wsProject,
                            error: error.message
                        });
                    }
                }
                
            } catch (error) {
                console.error(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:`, error.message);
                results.errors.push({
                    project: wsProject,
                    error: error.message
                });
            }
        }
        
        console.log('\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:`);
        console.log(`   üÜï –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${results.created.length}`);
        console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${results.updated.length}`);
        console.log(`   ‚úÖ –û–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${results.unchanged.length}`);
        console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${(results.deleted || []).length}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (results.created.length > 0) {
            console.log(`\nüÜï –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:`);
            results.created.forEach(item => {
                console.log(`   üì¶ "${item.object.object_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}"`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (results.updated.length > 0) {
            console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:`);
            results.updated.forEach(item => {
                console.log(`   üì¶ "${item.object.object_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}"`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (results.deleted && results.deleted.length > 0) {
            console.log(`\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:`);
            results.deleted.forEach(item => {
                console.log(`   üì¶ "${item.object.object_name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}" (–ø—Ä–∏—á–∏–Ω–∞: ${item.reason})`);
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if (results.errors.length > 0) {
            console.log(`\n‚ùå –û—à–∏–±–∫–∏:`);
            results.errors.forEach(item => {
                if (item.task) {
                    console.log(`   üì¶ –ó–∞–¥–∞—á–∞ "${item.task.name}" –≤ –ø—Ä–æ–µ–∫—Ç–µ "${item.project.name}": ${item.error}`);
                } else {
                    console.log(`   üì¶ –ü—Ä–æ–µ–∫—Ç "${item.project.name}": ${item.error}`);
                }
            });
        }
        
        return {
            success: true,
            data: results,
            summary: {
                created: results.created.length,
                updated: results.updated.length,
                unchanged: results.unchanged.length,
                deleted: (results.deleted || []).length,
                errors: results.errors.length
            }
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error.message);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –ø–æ–¥–∑–∞–¥–∞—á Worksection
 */
async function syncSectionsFromWorksection() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ø–æ–¥–∑–∞–¥–∞—á Worksection...');
    
    const results = {
        created: [],
        updated: [],
        unchanged: [],
        deleted: [],
        errors: []
    };
    
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync...');
        const wsProjectsResponse = await getProjectsWithSyncTag();
        
        if (!wsProjectsResponse.success || !wsProjectsResponse.data) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º');
            return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å sync —Ç–µ–≥–æ–º', data: results };
        }
        
        const wsProjects = wsProjectsResponse.data;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${wsProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync`);
        
        if (wsProjects.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return { success: true, data: results, summary: { created: 0, updated: 0, unchanged: 0, deleted: 0, errors: 0 } };
        }
        
        // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...');
        const [existingObjects, existingSections] = await Promise.all([
            getAllObjects(),
            getAllSections()
        ]);
        
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Supabase:`);
        console.log(`   üì¶ –û–±—ä–µ–∫—Ç—ã: ${existingObjects.length}`);
        console.log(`   üìë –†–∞–∑–¥–µ–ª—ã: ${existingSections.length}`);
        
        // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —Å sync —Ç–µ–≥–æ–º
        for (const wsProject of wsProjects) {
            console.log(`\nüîç [${wsProject.name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
                console.log(`üìã [${wsProject.name}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏...`);
                const tasksResponse = await makeWorksectionRequest('get_tasks', {
                    id_project: wsProject.id,
                    extra: 'subtasks'  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º extra=subtasks
                });
                
                if (tasksResponse.data.status !== 'ok') {
                    console.log(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${tasksResponse.data.message}`);
                    results.errors.push({
                        project: wsProject.name,
                        error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${tasksResponse.data.message}`
                    });
                    continue;
                }
                
                const allTasks = tasksResponse.data.data || [];
                console.log(`üìã [${wsProject.name}] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${allTasks.length}`);
                
                // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
                let taskCount = 0;
                let subtaskCount = 0;
                
                for (const wsTask of allTasks) {
                    taskCount++;
                    
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    if (wsTask.status !== 'active') {
                        console.log(`‚è≠Ô∏è [${wsProject.name}] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: "${wsTask.name}"`);
                        continue;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
                    const parentObject = existingObjects.find(obj => 
                        obj.external_id && obj.external_id.toString() === wsTask.id.toString()
                    );
                    
                    if (!parentObject) {
                        console.log(`‚ö†Ô∏è [${wsProject.name}] –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ "${wsTask.name}" (ID: ${wsTask.id})`);
                        continue;
                    }
                    
                    console.log(`‚úÖ [${wsProject.name}] –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ "${wsTask.name}": "${parentObject.object_name}"`);
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –≤ –ø–æ–ª–µ child)
                    const subtasks = wsTask.child || [];
                    console.log(`üìë [${wsProject.name}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á –≤ –∑–∞–¥–∞—á–µ "${wsTask.name}": ${subtasks.length}`);
                    
                    for (const subtask of subtasks) {
                        subtaskCount++;
                        
                        try {
                            const result = await processSingleSubtask(
                                subtask, 
                                parentObject, 
                                wsProject, 
                                existingSections
                            );
                            
                            if (result.action === 'created') {
                                results.created.push({
                                    section: result.section,
                                    project: wsProject,
                                    subtask: subtask
                                });
                            } else if (result.action === 'updated') {
                                results.updated.push({
                                    section: result.section,
                                    project: wsProject,
                                    subtask: subtask
                                });
                            } else if (result.action === 'unchanged') {
                                results.unchanged.push({
                                    section: result.section,
                                    project: wsProject,
                                    subtask: subtask
                                });
                            }
                            
                        } catch (subtaskError) {
                            console.log(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏ "${subtask.name}": ${subtaskError.message}`);
                            results.errors.push({
                                project: wsProject.name,
                                task: wsTask.name,
                                subtask: subtask.name,
                                error: subtaskError.message
                            });
                        }
                    }
                }
                
                console.log(`üìä [${wsProject.name}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: ${taskCount}, –ø–æ–¥–∑–∞–¥–∞—á: ${subtaskCount}`);
                
            } catch (projectError) {
                console.log(`‚ùå [${wsProject.name}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${projectError.message}`);
                results.errors.push({
                    project: wsProject.name,
                    error: projectError.message
                });
            }
        }
        
        // 5. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log(`\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:`);
        console.log(`   üÜï –°–æ–∑–¥–∞–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${results.created.length}`);
        console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${results.updated.length}`);
        console.log(`   ‚úÖ –†–∞–∑–¥–µ–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${results.unchanged.length}`);
        console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: ${results.deleted.length}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);
        
        if (results.errors.length > 0) {
            console.log(`\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:`);
            results.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error.project}: ${error.error}`);
            });
        }
        
        return {
            success: true,
            data: results,
            summary: {
                created: results.created.length,
                updated: results.updated.length,
                unchanged: results.unchanged.length,
                deleted: results.deleted.length,
                errors: results.errors.length
            }
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error.message);
        return {
            success: false,
            error: error.message,
            data: results
        };
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–∑–∞–¥–∞—á—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function processSingleSubtask(wsSubtask, parentObject, wsProject, existingSections) {
    console.log(`üìë [${wsProject.name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏: "${wsSubtask.name}" (ID: ${wsSubtask.id})`);
    
    // 1. –§–∏–ª—å—Ç—Ä—ã –ø–æ–¥–∑–∞–¥–∞—á
    if (wsSubtask.status !== 'active') {
        console.log(`‚è≠Ô∏è [${wsProject.name}] –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏: "${wsSubtask.name}"`);
        return { action: 'skipped', reason: 'inactive' };
    }
    
    if (wsSubtask.name.startsWith('!')) {
        console.log(`‚è≠Ô∏è [${wsProject.name}] –ü—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏: "${wsSubtask.name}"`);
        return { action: 'skipped', reason: 'service_task' };
    }
    
    // 2. –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let responsibleId = null;
    if (wsSubtask.user_to && wsSubtask.user_to.email) {
        const responsible = await findUserByEmail(wsSubtask.user_to.email);
        if (responsible) {
            responsibleId = responsible.user_id;
            console.log(`üë§ [${wsProject.name}] –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${responsible.first_name} ${responsible.last_name}`);
        } else {
            console.log(`‚ö†Ô∏è [${wsProject.name}] –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è email: ${wsSubtask.user_to.email}`);
        }
    }
    
    // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞
    const sectionData = {
        section_name: wsSubtask.name.substring(0, 255), // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤
        section_description: wsSubtask.text || null,
        section_responsible: responsibleId,
        section_object_id: parentObject.object_id,
        section_project_id: parentObject.object_project_id,
        section_type: 'work', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–∏–ø "work"
        section_start_date: wsSubtask.date_start || null,
        section_end_date: wsSubtask.date_end || null,
        external_id: wsSubtask.id.toString(),
        external_source: 'worksection',
        external_updated_at: new Date().toISOString()
    };
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    const existingSection = existingSections.find(
        s => s.external_id && 
             s.external_id.toString() === wsSubtask.id.toString() &&
             s.section_project_id === parentObject.object_project_id
    );
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π (–µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω)
    if (existingSection) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å project_id
        if (existingSection.section_project_id !== parentObject.object_project_id) {
            console.log(`‚ö†Ô∏è [${wsProject.name}] –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å project_id –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "${existingSection.section_name}": —Ä–∞–∑–¥–µ–ª=${existingSection.section_project_id}, –æ–±—ä–µ–∫—Ç=${parentObject.object_project_id}`);
            throw new Error(`–ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å project_id –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "${existingSection.section_name}"`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å object_id  
        if (existingSection.section_object_id !== parentObject.object_id) {
            console.log(`üîÑ [${wsProject.name}] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ "${existingSection.section_name}" –∫ –Ω–æ–≤–æ–º—É –æ–±—ä–µ–∫—Ç—É: ${existingSection.section_object_id} ‚Üí ${parentObject.object_id}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º section_object_id –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            sectionData.section_object_id = parentObject.object_id;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const needsUpdate = hasChanges(existingSection, sectionData, [
            'section_name', 'section_description', 'section_responsible',
            'section_object_id', 'section_start_date', 'section_end_date'
        ]);
        
        if (needsUpdate) {
            console.log(`üîÑ [${wsProject.name}] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª: "${sectionData.section_name}"`);
            
            const updatedSection = await updateSection(existingSection.section_id, sectionData);
            
            if (updatedSection) {
                console.log(`‚úÖ [${wsProject.name}] –†–∞–∑–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω: "${sectionData.section_name}"`);
                return { action: 'updated', section: updatedSection };
            } else {
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª "${sectionData.section_name}"`);
            }
        } else {
            console.log(`‚úÖ [${wsProject.name}] –†–∞–∑–¥–µ–ª –∞–∫—Ç—É–∞–ª–µ–Ω: "${sectionData.section_name}"`);
            return { action: 'unchanged', section: existingSection };
        }
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        console.log(`üÜï [${wsProject.name}] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: "${sectionData.section_name}"`);
        
        const newSection = await createSection(sectionData);
        
        if (newSection) {
            console.log(`‚úÖ [${wsProject.name}] –†–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω: "${sectionData.section_name}" (ID: ${newSection.section_id})`);
            return { action: 'created', section: newSection };
        } else {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª "${sectionData.section_name}"`);
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞
 */
function hasChanges(existingSection, newSectionData, fieldsToCheck = null) {
    // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    const fields = fieldsToCheck || [
        'section_name', 'section_description', 'section_responsible', 
        'section_object_id', 'section_start_date', 'section_end_date'
    ];
    
    for (const field of fields) {
        const existingValue = existingSection[field];
        const newValue = newSectionData[field];
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        if (field.includes('date')) {
            const existingDate = existingValue ? new Date(existingValue).getTime() : null;
            const newDate = newValue ? new Date(newValue).getTime() : null;
            
            if (existingDate !== newDate) {
                console.log(`üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ ${field}: ${existingValue} ‚Üí ${newValue}`);
                return true;
            }
        } else {
            // –û–±—ã—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (existingValue !== newValue) {
                console.log(`üîç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–æ–ª–µ ${field}: ${existingValue} ‚Üí ${newValue}`);
                return true;
            }
        }
    }
    
    return false;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
 */
async function generateSystemStatusReport() {
    const logger = createLogger('–û—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã');
    const startTime = Date.now();
    
    try {
        logger.info('–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã...');
        
        // –°–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
        const [projects, stages, objects, sections] = await Promise.all([
            getAllProjects(),
            getAllStages(), 
            getAllObjects(),
            getAllSections()
        ]);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
        const projectsSources = {
            worksection: projects.filter(p => p.external_source === 'worksection').length,
            manual: projects.filter(p => !p.external_source || p.external_source !== 'worksection').length,
            with_external_id: projects.filter(p => p.external_id).length
        };
        
        const stagesSources = {
            worksection: stages.filter(s => s.external_source === 'worksection').length,
            manual: stages.filter(s => !s.external_source || s.external_source !== 'worksection').length,
            with_external_id: stages.filter(s => s.external_id).length
        };
        
        const objectsSources = {
            worksection: objects.filter(o => o.external_source === 'worksection').length,
            manual: objects.filter(o => !o.external_source || o.external_source !== 'worksection').length,
            with_external_id: objects.filter(o => o.external_id).length
        };
        
        const sectionsSources = {
            worksection: sections.filter(s => s.external_source === 'worksection').length,
            manual: sections.filter(s => !s.external_source || s.external_source !== 'worksection').length,
            with_external_id: sections.filter(s => s.external_id).length
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        const hierarchyValidation = await validateHierarchyConsistency();
        
        // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const recentSyncDate = new Date();
        recentSyncDate.setHours(recentSyncDate.getHours() - 24);
        
        const recentSyncs = {
            projects: projects.filter(p => 
                p.external_updated_at && new Date(p.external_updated_at) > recentSyncDate
            ).length,
            stages: stages.filter(s => 
                s.external_updated_at && new Date(s.external_updated_at) > recentSyncDate
            ).length,
            objects: objects.filter(o => 
                o.external_updated_at && new Date(o.external_updated_at) > recentSyncDate
            ).length,
            sections: sections.filter(s => 
                s.external_updated_at && new Date(s.external_updated_at) > recentSyncDate
            ).length
        };
        
        // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        const issues = [];
        const warnings = [];
        
        if (hierarchyValidation.issues.length > 0) {
            issues.push(...hierarchyValidation.issues);
        }
        
        if (projectsSources.worksection === 0) {
            warnings.push('–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑ Worksection');
        }
        
        if (recentSyncs.projects === 0 && recentSyncs.stages === 0 && 
            recentSyncs.objects === 0 && recentSyncs.sections === 0) {
            warnings.push('–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)');
        }
        
        const duration = Date.now() - startTime;
        
        logger.success(`–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${duration}–º—Å`);
        
        return {
            success: true,
            timestamp: new Date().toISOString(),
            generation_time_ms: duration,
            summary: {
                total_entities: projects.length + stages.length + objects.length + sections.length,
                hierarchy_levels: 4,
                sync_coverage: {
                    projects: Math.round((projectsSources.worksection / projects.length) * 100) || 0,
                    stages: Math.round((stagesSources.worksection / stages.length) * 100) || 0,
                    objects: Math.round((objectsSources.worksection / objects.length) * 100) || 0,
                    sections: Math.round((sectionsSources.worksection / sections.length) * 100) || 0
                },
                health_score: Math.max(0, 100 - (issues.length * 10) - (warnings.length * 5))
            },
            statistics: {
                projects: {
                    total: projects.length,
                    ...projectsSources
                },
                stages: {
                    total: stages.length,
                    ...stagesSources
                },
                objects: {
                    total: objects.length,
                    ...objectsSources
                },
                sections: {
                    total: sections.length,
                    ...sectionsSources
                }
            },
            hierarchy_validation: hierarchyValidation,
            recent_activity: {
                description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
                ...recentSyncs,
                total: recentSyncs.projects + recentSyncs.stages + recentSyncs.objects + recentSyncs.sections
            },
            issues: {
                critical: issues,
                warnings: warnings,
                total_issues: issues.length + warnings.length
            },
            recommendations: generateRecommendations(projectsSources, stagesSources, objectsSources, sectionsSources, issues, warnings)
        };
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞', error);
        return {
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã
 */
function generateRecommendations(projectsSources, stagesSources, objectsSources, sectionsSources, issues, warnings) {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (projectsSources.worksection === 0) {
        recommendations.push({
            type: 'sync',
            priority: 'high',
            message: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection',
            action: '–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–∫—É "eneca.work sync" –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –≤ Worksection'
        });
    }
    
    if (projectsSources.worksection > 0 && stagesSources.worksection === 0) {
        recommendations.push({
            type: 'sync',
            priority: 'medium',
            message: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞–¥–∏–π',
            action: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ POST /api/stages/sync'
        });
    }
    
    if (stagesSources.worksection > 0 && objectsSources.worksection === 0) {
        recommendations.push({
            type: 'sync',
            priority: 'medium',
            message: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤',
            action: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ POST /api/objects/sync'
        });
    }
    
    if (objectsSources.worksection > 0 && sectionsSources.worksection === 0) {
        recommendations.push({
            type: 'sync',
            priority: 'medium',
            message: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ä–∞–∑–¥–µ–ª–æ–≤',
            action: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ POST /api/sections/sync'
        });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ
    if (issues.length > 0) {
        recommendations.push({
            type: 'maintenance',
            priority: 'high',
            message: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö',
            action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ POST /api/maintenance/cleanup-orphaned'
        });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const totalSynced = projectsSources.worksection + stagesSources.worksection + 
                       objectsSources.worksection + sectionsSources.worksection;
    const totalEntities = projectsSources.total + stagesSources.total + 
                         objectsSources.total + sectionsSources.total;
    
    if (totalSynced > 0 && (totalSynced / totalEntities) < 0.1) {
        recommendations.push({
            type: 'optimization',
            priority: 'low',
            message: '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Worksection',
            action: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö'
        });
    }
    
    return recommendations;
}

/**
 * –û—á–∏—â–∞–µ—Ç orphaned –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
 */
async function cleanupOrphanedRecords(options = {}) {
    const logger = createLogger('–û—á–∏—Å—Ç–∫–∞');
    const { dryRun = true, force = false } = options;
    
    try {
        logger.info(`–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π (dryRun: ${dryRun}, force: ${force})...`);
        
        if (!force && !dryRun) {
            throw new Error('–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å force: true');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è orphaned –∑–∞–ø–∏—Å–µ–π
        const validation = await validateHierarchyConsistency();
        
        if (!validation.success) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
        }
        
        const cleanupResults = {
            orphaned_stages_deleted: 0,
            orphaned_objects_deleted: 0,
            orphaned_sections_deleted: 0,
            errors: []
        };
        
        if (dryRun) {
            logger.info('–†–µ–∂–∏–º –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –±—É–¥–µ—Ç');
            
            return {
                success: true,
                dry_run: true,
                would_delete: {
                    stages: validation.statistics.orphaned_stages,
                    objects: validation.statistics.orphaned_objects,
                    sections: validation.statistics.orphaned_sections
                },
                validation: validation
            };
        }
        
        // –†–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ –Ω–µ dryRun –∏ force = true)
        // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        logger.warning('–†–µ–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        
        return {
            success: true,
            dry_run: false,
            cleaned: cleanupResults,
            validation: validation
        };
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏', error);
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function checkSyncHealth() {
    const logger = createLogger('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');
    const checks = [];
    let overallHealth = 'healthy';
    
    try {
        logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Worksection
        try {
            const wsResponse = await makeWorksectionRequest('get_accounts');
            checks.push({
                name: 'Worksection API',
                status: wsResponse.data.status === 'ok' ? 'healthy' : 'unhealthy',
                message: wsResponse.data.status === 'ok' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                details: wsResponse.data
            });
        } catch (error) {
            checks.push({
                name: 'Worksection API',
                status: 'critical',
                message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`,
                details: null
            });
            overallHealth = 'critical';
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
        try {
            const projects = await getAllProjects();
            checks.push({
                name: 'Supabase Database',
                status: 'healthy',
                message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`,
                details: { projects_count: projects.length }
            });
        } catch (error) {
            checks.push({
                name: 'Supabase Database',
                status: 'critical',
                message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`,
                details: null
            });
            overallHealth = 'critical';
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try {
            const syncProjects = await getProjectsWithSyncTag();
            const hasSyncData = syncProjects.success && syncProjects.data.length > 0;
            
            checks.push({
                name: 'Sync Projects',
                status: hasSyncData ? 'healthy' : 'warning',
                message: hasSyncData ? 
                    `–ù–∞–π–¥–µ–Ω–æ ${syncProjects.data.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏` : 
                    '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync',
                details: syncProjects
            });
            
            if (!hasSyncData && overallHealth === 'healthy') {
                overallHealth = 'warning';
            }
        } catch (error) {
            checks.push({
                name: 'Sync Projects',
                status: 'unhealthy',
                message: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ sync –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.message}`,
                details: null
            });
            if (overallHealth === 'healthy') overallHealth = 'unhealthy';
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envVars = [
            'WORKSECTION_HASH', 'WORKSECTION_DOMAIN', 'SUPABASE_URL', 'SUPABASE_ANON_KEY'
        ];
        
        const missingVars = envVars.filter(varName => !process.env[varName]);
        
        checks.push({
            name: 'Environment Variables',
            status: missingVars.length === 0 ? 'healthy' : 'critical',
            message: missingVars.length === 0 ? 
                '–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã' : 
                `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missingVars.join(', ')}`,
            details: {
                required: envVars,
                missing: missingVars,
                configured: envVars.filter(varName => !!process.env[varName])
            }
        });
        
        if (missingVars.length > 0) {
            overallHealth = 'critical';
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        const validation = await validateHierarchyConsistency();
        const hasIssues = validation.issues && validation.issues.length > 0;
        
        checks.push({
            name: 'Data Integrity',
            status: hasIssues ? 'warning' : 'healthy',
            message: hasIssues ? 
                `–ù–∞–π–¥–µ–Ω–æ ${validation.issues.length} –ø—Ä–æ–±–ª–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏` : 
                '–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ',
            details: validation
        });
        
        if (hasIssues && overallHealth === 'healthy') {
            overallHealth = 'warning';
        }
        
        logger.success(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${overallHealth}`);
        
        return {
            success: true,
            overall_health: overallHealth,
            timestamp: new Date().toISOString(),
            checks,
            summary: {
                total_checks: checks.length,
                healthy: checks.filter(c => c.status === 'healthy').length,
                warnings: checks.filter(c => c.status === 'warning').length,
                unhealthy: checks.filter(c => c.status === 'unhealthy').length,
                critical: checks.filter(c => c.status === 'critical').length
            }
        };
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è', error);
        return {
            success: false,
            overall_health: 'critical',
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

module.exports = {
    getProjectsWithSyncTag,
    getProjectTags,
    createSyncTag,
    getProjectDetails,
    syncProjectsToDatabase,
    syncProjectsToSupabase,
    updateProjectsFromWorksection,
    getSupabaseProjectsWithExternalId,
    createProjectInSupabase,
    mapWorksectionStatus,
    syncStagesFromWorksection,
    syncObjectsFromWorksection,
    syncSectionsFromWorksection,
    validateHierarchyConsistency,
    generateSystemStatusReport,
    cleanupOrphanedRecords,
    checkSyncHealth
}; 
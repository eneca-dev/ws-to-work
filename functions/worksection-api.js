const https = require('https');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../ws.env') });

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Worksection API
 * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ API (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'get_projects', 'get_tasks')
 * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function makeWorksectionRequest(action, params = {}) {
    return new Promise((resolve, reject) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (!process.env.WORKSECTION_DOMAIN) {
                throw new Error('WORKSECTION_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }
            if (!process.env.WORKSECTION_HASH) {
                throw new Error('WORKSECTION_HASH –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }

            const crypto = require('crypto');
            const domain = process.env.WORKSECTION_DOMAIN;
            const apiKey = process.env.WORKSECTION_HASH;

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∫—Ä–æ–º–µ hash)
            const allParams = { action, ...params };
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º extra 
            // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ù–ï –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            let paramString;
            if (params.extra) {
                // –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å extra –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: action, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                const orderedKeys = ['action'];
                Object.keys(params).forEach(key => {
                    if (!orderedKeys.includes(key)) {
                        orderedKeys.push(key);
                    }
                });
                paramString = orderedKeys.map(key => `${key}=${allParams[key]}`).join('&');
                console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å extra');
            } else {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
                const sortedKeys = Object.keys(allParams).sort();
                paramString = sortedKeys.map(key => `${key}=${allParams[key]}`).join('&');
                console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
            }
            
            const hashString = paramString + apiKey;
            
            console.log(`üîê –°—Ç—Ä–æ–∫–∞ –¥–ª—è hash:`, hashString);
            
            // –°–æ–∑–¥–∞–µ–º MD5 hash
            const hash = crypto.createHash('md5').update(hashString).digest('hex');
            
            console.log(`üîê –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hash:`, hash);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –° hash
            const queryParams = new URLSearchParams({
                action: action,
                ...params,
                hash: hash
            });

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º admin API v2 —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            const options = {
                hostname: domain,
                port: 443,
                path: `/api/admin/v2/?${queryParams.toString()}`,
                method: 'GET',
                headers: {
                    'User-Agent': 'eneca.work Integration/1.0'
                }
            };

            console.log(`üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Worksection API: ${action}`);
            console.log(`üì° URL: https://${domain}/api/admin/v2/?${queryParams.toString()}`);
            console.log(`üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`, Object.fromEntries(queryParams));

            const req = https.request(options, (res) => {
                let data = '';

                res.on('data', (chunk) => {
                    data += chunk;
                });

                res.on('end', () => {
                    try {
                        console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (${res.statusCode}):`, data);
                        console.log(`üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                        
                        if (!data || data.length === 0) {
                            reject(new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API'));
                            return;
                        }

                        const parsedData = JSON.parse(data);
                        
                        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (${res.statusCode}):`, {
                            status: parsedData.status,
                            dataLength: parsedData.data ? (Array.isArray(parsedData.data) ? parsedData.data.length : 'object') : 'no data'
                        });

                        resolve({
                            statusCode: res.statusCode,
                            data: parsedData
                        });
                    } catch (parseError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError.message);
                        console.error('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
                        console.error('üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', data.length);
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${parseError.message}`));
                    }
                });
            });

            req.on('error', (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
                reject(new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`));
            });

            req.on('timeout', () => {
                console.error('‚è∞ –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
                req.destroy();
                reject(new Error('–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API'));
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            req.setTimeout(30000);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø—Ä–æ—Å (GET –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
            req.end();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
            reject(error);
        }
    });
}

module.exports = {
    makeWorksectionRequest
}; 
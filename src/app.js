const express = require('express');
const path = require('path');
const cors = require('cors');
require('dotenv').config({ path: path.join(__dirname, '../ws.env') });

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const { makeWorksectionRequest } = require('../test-worksection');
const { 
    getProjectsWithSyncTag, 
    getProjectTags, 
    createSyncTag, 
    syncProjectsToDatabase,
    syncProjectsToSupabase,
    updateProjectsFromWorksection,
    syncStagesFromWorksection,
    syncObjectsFromWorksection,
    syncSectionsFromWorksection
} = require('../functions/projects');

class WSToWorkApp {
    constructor() {
        this.app = express();
        
        this.stats = {
            totalRequests: 0,
            successRequests: 0,
            errorRequests: 0,
            avgResponseTime: 0,
            projectsCount: 0,
            tasksCount: 0,
            startTime: Date.now()
        };
        
        this.setupMiddleware();
        this.setupRoutes();
        this.setupErrorHandling();
    }

    setupMiddleware() {
        // CORS
        this.app.use(cors());
        
        // JSON –ø–∞—Ä—Å–∏–Ω–≥
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: true }));
        
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        this.app.use(express.static(path.join(__dirname, '../public')));
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            const start = Date.now();
            
            res.on('finish', () => {
                const duration = Date.now() - start;
                this.updateStats('request', duration, res.statusCode < 400);
                console.log(`${req.method} ${req.path} - ${res.statusCode} (${duration}ms)`);
            });
            
            next();
        });
    }

    setupRoutes() {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        this.app.get('/', (req, res) => {
            res.sendFile(path.join(__dirname, '../public/index.html'));
        });

        // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        this.app.get('/api/health', (req, res) => {
            res.json({
                status: 'ok',
                uptime: Date.now() - this.stats.startTime,
                memory: process.memoryUsage(),
                stats: this.stats
            });
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.post('/api/sync/projects', async (req, res) => {
            try {
                console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                const result = await this.syncProjects(req.body);
                
                console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.projectsCount} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${result.tasksCount} –∑–∞–¥–∞—á`);

                res.json({
                    success: true,
                    ...result
                });

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);

                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.get('/api/projects', async (req, res) => {
            try {
                console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection...');

                const { makeWorksectionRequest } = require('../test-worksection');
                const response = await makeWorksectionRequest('get_projects');
                
                if (response.statusCode === 200 && response.data.status === 'ok') {
                    const projects = response.data.data || [];
                    
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);

                    res.json({
                        success: true,
                        projects: projects.slice(0, 10), // –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        total: projects.length
                    });
                } else {
                    throw new Error(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
                }

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);

                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.app.get('/api/stats', (req, res) => {
            res.json({
                success: true,
                stats: {
                    ...this.stats,
                    uptime: Date.now() - this.stats.startTime
                }
            });
        });

        // ======= –ù–û–í–´–ï API –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–ï–ö–¢–ê–ú–ò =======

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π "eneca.work sync"
        this.app.get('/api/projects/sync', async (req, res) => {
            try {
                console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync...');
                
                const result = await getProjectsWithSyncTag();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è sync –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.get('/api/projects/tags', async (req, res) => {
            try {
                console.log('üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await getProjectTags();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase
        this.app.get('/api/supabase/projects', async (req, res) => {
            try {
                console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase...');
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Supabase API
                const { getAllProjects, getProjectsWithExternalId } = require('../functions/supabase-client');
                
                const allSupabaseProjects = await getAllProjects();
                const supabaseProjects = await getProjectsWithExternalId();
                
                console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase: ${allSupabaseProjects.length}`);
                console.log(`üîó –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id: ${supabaseProjects.length}`);
                
                res.json({
                    success: true,
                    data: supabaseProjects,
                    total: supabaseProjects.length,
                    totalInSupabase: allSupabaseProjects.length,
                    withoutExternalId: allSupabaseProjects.length - supabaseProjects.length,
                    message: `–ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id –∏–∑ ${allSupabaseProjects.length} –æ–±—â–∏—Ö`
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        this.app.post('/api/projects/sync-auto', async (req, res) => {
            try {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await syncProjectsToSupabase();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä)
        this.app.post('/api/projects/update', async (req, res) => {
            try {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await updateProjectsFromWorksection();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π –∏–∑ –º–µ—Ç–æ–∫ Worksection
        this.app.post('/api/stages/sync', async (req, res) => {
            try {
                console.log('üè∑Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π...');
                
                const result = await syncStagesFromWorksection();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∑–∞–¥–∞—á Worksection
        this.app.post('/api/objects/sync', async (req, res) => {
            try {
                console.log('üì¶ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤...');
                
                const result = await syncObjectsFromWorksection();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ø–æ–¥–∑–∞–¥–∞—á Worksection
        this.app.post('/api/sections/sync', async (req, res) => {
            try {
                console.log('üìë –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤...');
                
                const result = await syncSectionsFromWorksection();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        this.app.post('/api/sync/full', async (req, res) => {
            try {
                console.log('üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
                
                const result = await this.runFullSync();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message,
                    logs: [`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`]
                });
            }
        });
    }

    async syncProjects(params = {}) {
        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection...');
        
        await delay(1000);
        
        const projects = await makeWorksectionRequest('get_projects');
        if (projects.statusCode !== 200 || projects.data.status !== 'ok') {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection');
        }
        
        const projectsData = projects.data.data || [];
        
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${projectsData.length} –ø—Ä–æ–µ–∫—Ç–æ–≤...`);
        
        await delay(1500);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
        let totalTasks = 0;
        for (let i = 0; i < Math.min(5, projectsData.length); i++) {
            const project = projectsData[i];
            console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${project.name}`);
            
            const tasks = await makeWorksectionRequest('get_tasks', { id_project: project.id });
            if (tasks.statusCode === 200 && tasks.data.status === 'ok') {
                const tasksCount = tasks.data.data?.length || 0;
                totalTasks += tasksCount;
                
                console.log(`   - –ù–∞–π–¥–µ–Ω–æ ${tasksCount} –∑–∞–¥–∞—á`);
            }
            
            await delay(500);
        }
        
        console.log('üíæ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');
        
        await delay(1000);
        
        const result = {
            projectsCount: projectsData.length,
            tasksCount: totalTasks,
            duration: '3.2s',
            timestamp: new Date().toISOString()
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.projectsCount = result.projectsCount;
        this.stats.tasksCount = result.tasksCount;
        this.stats.successRequests += 1;
        
        return result;
    }

    async runFullSync() {
        const startTime = Date.now();
        const logs = [];
        const results = {
            projects: null,
            stages: null,
            objects: null,
            sections: null
        };
        
        let totalCreated = 0;
        let totalUpdated = 0;
        let totalErrors = 0;
        
        try {
            logs.push('üöÄ === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===');
            logs.push(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString('ru-RU')}`);
            logs.push('');
            
            // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–∞—è)
            logs.push('üè¢ –≠–¢–ê–ü 1/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
            try {
                results.projects = await syncProjectsToSupabase();
                
                if (results.projects.success) {
                    const created = results.projects.created?.length || 0;
                    const updated = results.projects.updated?.length || 0;
                    const errors = results.projects.errors?.length || 0;
                    
                    totalCreated += created;
                    totalUpdated += updated;
                    totalErrors += errors;
                    
                    logs.push(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}, –æ—à–∏–±–æ–∫ ${errors}`);
                    
                    // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
                    if (results.projects.created && results.projects.created.length > 0) {
                        logs.push('  üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:');
                        results.projects.created.forEach(project => {
                            logs.push(`    + ${project.project_name} (ID: ${project.project_id})`);
                        });
                    }
                    
                    if (results.projects.updated && results.projects.updated.length > 0) {
                        logs.push('  üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:');
                        results.projects.updated.forEach(project => {
                            logs.push(`    ‚Üª ${project.project_name} (ID: ${project.project_id})`);
                        });
                    }
                    
                    if (results.projects.errors && results.projects.errors.length > 0) {
                        logs.push('  ‚ùå –û—à–∏–±–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
                        results.projects.errors.forEach(error => {
                            logs.push(`    ‚ö†Ô∏è ${error}`);
                        });
                    }
                } else {
                    logs.push(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${results.projects.error}`);
                    totalErrors++;
                }
            } catch (error) {
                logs.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.message}`);
                totalErrors++;
            }
            
            logs.push('');
            
            // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π
            logs.push('üéØ –≠–¢–ê–ü 2/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π...');
            try {
                results.stages = await syncStagesFromWorksection();
                
                if (results.stages.success) {
                    const created = results.stages.created?.length || 0;
                    const updated = results.stages.updated?.length || 0;
                    const errors = results.stages.errors?.length || 0;
                    
                    totalCreated += created;
                    totalUpdated += updated;
                    totalErrors += errors;
                    
                    logs.push(`‚úÖ –°—Ç–∞–¥–∏–∏: —Å–æ–∑–¥–∞–Ω–æ ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}, –æ—à–∏–±–æ–∫ ${errors}`);
                    
                    // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏
                    if (results.stages.created && results.stages.created.length > 0) {
                        logs.push('  üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏:');
                        results.stages.created.forEach(stage => {
                            logs.push(`    + ${stage.stage_name} (–ü—Ä–æ–µ–∫—Ç: ${stage.project?.project_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.stages.updated && results.stages.updated.length > 0) {
                        logs.push('  üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏:');
                        results.stages.updated.forEach(stage => {
                            logs.push(`    ‚Üª ${stage.stage_name} (–ü—Ä–æ–µ–∫—Ç: ${stage.project?.project_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.stages.errors && results.stages.errors.length > 0) {
                        logs.push('  ‚ùå –û—à–∏–±–∫–∏ —Å—Ç–∞–¥–∏–π:');
                        results.stages.errors.forEach(error => {
                            logs.push(`    ‚ö†Ô∏è ${error}`);
                        });
                    }
                } else {
                    logs.push(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π: ${results.stages.error}`);
                    totalErrors++;
                }
            } catch (error) {
                logs.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞–¥–∏–π: ${error.message}`);
                totalErrors++;
            }
            
            logs.push('');
            
            // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            logs.push('üì¶ –≠–¢–ê–ü 3/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...');
            try {
                results.objects = await syncObjectsFromWorksection();
                
                if (results.objects.success) {
                    const created = results.objects.created?.length || 0;
                    const updated = results.objects.updated?.length || 0;
                    const errors = results.objects.errors?.length || 0;
                    
                    totalCreated += created;
                    totalUpdated += updated;
                    totalErrors += errors;
                    
                    logs.push(`‚úÖ –û–±—ä–µ–∫—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}, –æ—à–∏–±–æ–∫ ${errors}`);
                    
                    // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É
                    if (results.objects.created && results.objects.created.length > 0) {
                        logs.push('  üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
                        results.objects.created.forEach(object => {
                            logs.push(`    + ${object.object_name} (–°—Ç–∞–¥–∏—è: ${object.stage?.stage_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.objects.updated && results.objects.updated.length > 0) {
                        logs.push('  üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
                        results.objects.updated.forEach(object => {
                            logs.push(`    ‚Üª ${object.object_name} (–°—Ç–∞–¥–∏—è: ${object.stage?.stage_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.objects.errors && results.objects.errors.length > 0) {
                        logs.push('  ‚ùå –û—à–∏–±–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:');
                        results.objects.errors.forEach(error => {
                            logs.push(`    ‚ö†Ô∏è ${error}`);
                        });
                    }
                } else {
                    logs.push(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤: ${results.objects.error}`);
                    totalErrors++;
                }
            } catch (error) {
                logs.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: ${error.message}`);
                totalErrors++;
            }
            
            logs.push('');
            
            // 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
            logs.push('üìë –≠–¢–ê–ü 4/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤...');
            try {
                results.sections = await syncSectionsFromWorksection();
                
                if (results.sections.success) {
                    const created = results.sections.created?.length || 0;
                    const updated = results.sections.updated?.length || 0;
                    const errors = results.sections.errors?.length || 0;
                    
                    totalCreated += created;
                    totalUpdated += updated;
                    totalErrors += errors;
                    
                    logs.push(`‚úÖ –†–∞–∑–¥–µ–ª—ã: —Å–æ–∑–¥–∞–Ω–æ ${created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}, –æ—à–∏–±–æ–∫ ${errors}`);
                    
                    // –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É
                    if (results.sections.created && results.sections.created.length > 0) {
                        logs.push('  üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:');
                        results.sections.created.forEach(section => {
                            logs.push(`    + ${section.section_name} (–û–±—ä–µ–∫—Ç: ${section.object?.object_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.sections.updated && results.sections.updated.length > 0) {
                        logs.push('  üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:');
                        results.sections.updated.forEach(section => {
                            logs.push(`    ‚Üª ${section.section_name} (–û–±—ä–µ–∫—Ç: ${section.object?.object_name || 'N/A'})`);
                        });
                    }
                    
                    if (results.sections.errors && results.sections.errors.length > 0) {
                        logs.push('  ‚ùå –û—à–∏–±–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:');
                        results.sections.errors.forEach(error => {
                            logs.push(`    ‚ö†Ô∏è ${error}`);
                        });
                    }
                } else {
                    logs.push(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: ${results.sections.error}`);
                    totalErrors++;
                }
            } catch (error) {
                logs.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: ${error.message}`);
                totalErrors++;
            }
            
            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            const duration = Date.now() - startTime;
            const durationSeconds = (duration / 1000).toFixed(1);
            
            logs.push('');
            logs.push('üèÅ === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===');
            logs.push(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${durationSeconds} —Å–µ–∫`);
            logs.push(`‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${totalCreated}`);
            logs.push(`üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated}`);
            logs.push(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
            logs.push(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
            
            const success = totalErrors === 0;
            if (success) {
                logs.push('üéâ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
            } else {
                logs.push('‚ö†Ô∏è –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò');
            }
            
            return {
                success,
                duration: durationSeconds,
                summary: {
                    created: totalCreated,
                    updated: totalUpdated,
                    errors: totalErrors,
                    total_operations: totalCreated + totalUpdated + totalErrors
                },
                details: results,
                logs,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            logs.push(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: ${error.message}`);
            
            return {
                success: false,
                error: error.message,
                duration: (Date.now() - startTime) / 1000,
                summary: {
                    created: totalCreated,
                    updated: totalUpdated,
                    errors: totalErrors + 1,
                    total_operations: totalCreated + totalUpdated + totalErrors + 1
                },
                details: results,
                logs,
                timestamp: new Date().toISOString()
            };
        }
    }

    updateStats(type, duration, success) {
        this.stats.totalRequests += 1;
        
        if (success) {
            this.stats.successRequests += 1;
        } else {
            this.stats.errorRequests += 1;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if (this.stats.avgResponseTime === 0) {
            this.stats.avgResponseTime = duration;
        } else {
            this.stats.avgResponseTime = Math.round(
                (this.stats.avgResponseTime + duration) / 2
            );
        }
    }

    setupErrorHandling() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
        this.app.use((req, res) => {
            res.status(404).json({
                success: false,
                error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.app.use((err, req, res, next) => {
            console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
            
            res.status(500).json({
                success: false,
                error: err.message
            });
        });
    }

    start() {
        const port = process.env.PORT || 3001;
        const host = process.env.HOST || 'localhost';
        
        this.app.listen(port, host, () => {
            console.log(`üöÄ WS-to-Work —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${host}:${port}`);
            console.log(`üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${host}:${port}`);
            console.log(`üîå API –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);
        });
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
    const app = new WSToWorkApp();
    app.start();
}

module.exports = WSToWorkApp; 
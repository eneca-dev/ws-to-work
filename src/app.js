const express = require('express');
const path = require('path');
const cors = require('cors');
require('dotenv').config({ path: path.join(__dirname, '../ws.env') });
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const { 
    getProjectsWithSyncTag, 
    getProjectTags, 
    createSyncTag, 
    syncProjectsToDatabase,
    syncProjectsToSupabase,
    updateProjectsFromWorksection,
    syncStagesFromWorksection,
    syncObjectsFromWorksection,
    syncSectionsFromWorksection,
    validateHierarchyConsistency,
    generateSystemStatusReport,
    cleanupOrphanedRecords,
    checkSyncHealth
} = require('../functions/projects');

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logsDir = path.join(__dirname, '..', 'logs');
const reportsDir = path.join(__dirname, '..', 'reports');
if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
}
if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
const writeLogToFile = (logEntry, logType = 'sync') => {
    const date = new Date().toISOString().slice(0, 10);
    const logFileName = `${logType}_${date}.log`;
    const logPath = path.join(logsDir, logFileName);
    
    const timestamp = new Date().toISOString();
    const formattedEntry = `[${timestamp}] ${logEntry}\n`;
    
    try {
        fs.appendFileSync(logPath, formattedEntry);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª:', error);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const createSyncReport = (syncResult) => {
    const timestamp = new Date().toISOString();
    const date = timestamp.slice(0, 10);
    const reportFileName = `sync_report_${timestamp.replace(/[:.]/g, '-')}.json`;
    const reportPath = path.join(reportsDir, reportFileName);
    
    const report = {
        ...syncResult,
        report_metadata: {
            generated_at: timestamp,
            report_type: 'sync_report',
            version: '1.0.0'
        }
    };
    
    try {
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        console.log(`üìÑ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: ${reportFileName}`);
        return reportFileName;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
        return null;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
const getReportsList = () => {
    try {
        const files = fs.readdirSync(reportsDir);
        return files
            .filter(file => file.startsWith('sync_report_') && file.endsWith('.json'))
            .map(file => {
                const stat = fs.statSync(path.join(reportsDir, file));
                return {
                    filename: file,
                    created_at: stat.birthtime,
                    size: stat.size,
                    path: `/api/reports/download/${file}`
                };
            })
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤:', error);
        return [];
    }
};

class WSToWorkApp {
    constructor() {
        this.app = express();
        
        this.stats = {
            totalRequests: 0,
            successRequests: 0,
            errorRequests: 0,
            avgResponseTime: 0,
            lastSyncDate: null,
            projectsCount: 0,
            tasksCount: 0,
            startTime: Date.now()
        };
        
        this.setupMiddleware();
        this.setupRoutes();
        this.setupErrorHandling();
    }

    setupMiddleware() {
        // CORS
        this.app.use(cors());
        
        // JSON –ø–∞—Ä—Å–∏–Ω–≥
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));
        
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        this.app.use(express.static(path.join(__dirname, '../public')));
        
        // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            const startTime = Date.now();
            const logEntry = `${req.method} ${req.url} - ${req.ip}`;
            
            writeLogToFile(logEntry, 'access');
            console.log(`üìù ${logEntry}`);
            
            res.on('finish', () => {
                const duration = Date.now() - startTime;
                const statusLogEntry = `${req.method} ${req.url} - ${res.statusCode} (${duration}ms)`;
                writeLogToFile(statusLogEntry, 'access');
                
                this.updateStats('request', duration, res.statusCode < 400);
            });
            
            next();
        });
    }

    setupRoutes() {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        this.app.get('/', (req, res) => {
            res.sendFile(path.join(__dirname, '../public/index.html'));
        });

        // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        this.app.get('/api/health', (req, res) => {
            res.json({
                status: 'ok',
                uptime: Date.now() - this.stats.startTime,
                memory: process.memoryUsage(),
                stats: this.stats
            });
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        this.app.get('/api/status', (req, res) => {
            const uptime = Date.now() - this.stats.uptime;
            
            res.json({
                success: true,
                status: 'running',
                uptime: Math.floor(uptime / 1000),
                stats: this.stats,
                environment: {
                    platform: process.platform,
                    node_version: process.version,
                    working_directory: process.cwd(),
                    memory_usage: process.memoryUsage(),
                    cpu_usage: process.cpuUsage()
                },
                configuration: {
                    supabase_configured: !!process.env.SUPABASE_URL,
                    worksection_configured: !!process.env.WORKSECTION_HASH,
                    logs_enabled: true,
                    reports_enabled: true
                }
            });
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
        this.app.get('/api/logs/:type?', (req, res) => {
            const logType = req.params.type || 'sync';
            const date = req.query.date || new Date().toISOString().slice(0, 10);
            const logFileName = `${logType}_${date}.log`;
            const logPath = path.join(logsDir, logFileName);
            
            try {
                if (fs.existsSync(logPath)) {
                    const logContent = fs.readFileSync(logPath, 'utf8');
                    const lines = logContent.split('\n').filter(line => line.trim());
                    
                    res.json({
                        success: true,
                        date,
                        type: logType,
                        total_lines: lines.length,
                        logs: lines
                    });
                } else {
                    res.json({
                        success: true,
                        date,
                        type: logType,
                        total_lines: 0,
                        logs: []
                    });
                }
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
        this.app.get('/api/reports/list', (req, res) => {
            try {
                const reports = getReportsList();
                res.json({
                    success: true,
                    total: reports.length,
                    reports
                });
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
        this.app.get('/api/reports/download/:filename', (req, res) => {
            const filename = req.params.filename;
            const reportPath = path.join(reportsDir, filename);
            
            try {
                if (fs.existsSync(reportPath)) {
                    res.setHeader('Content-Type', 'application/json');
                    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
                    res.sendFile(reportPath);
                } else {
                    res.status(404).json({
                        success: false,
                        error: '–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    });
                }
            } catch (error) {
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.post('/api/projects/sync', async (req, res) => {
            try {
                writeLogToFile('üè¢ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...', 'sync');
                console.log('üè¢ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await syncProjectsToSupabase();
                
                writeLogToFile(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'sync');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.message}`, 'sync');
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.get('/api/projects', async (req, res) => {
            try {
                console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection...');

                const { makeWorksectionRequest } = require('../functions/worksection-api');
                const response = await makeWorksectionRequest('get_projects');
                
                if (response.statusCode === 200 && response.data.status === 'ok') {
                    const projects = response.data.data || [];
                    
                    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);

                    res.json({
                        success: true,
                        projects: projects.slice(0, 10), // –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        total: projects.length
                    });
                } else {
                    throw new Error(response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
                }

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);

                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.app.get('/api/stats', (req, res) => {
            res.json({
                success: true,
                stats: {
                    ...this.stats,
                    uptime: Date.now() - this.stats.startTime
                }
            });
        });

        // ======= –ù–û–í–´–ï API –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–ï–ö–¢–ê–ú–ò =======

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π "eneca.work sync"
        this.app.get('/api/projects/with-sync-tag', async (req, res) => {
            try {
                console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –º–µ—Ç–∫–æ–π sync...');
                
                const result = await getProjectsWithSyncTag();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è sync –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        this.app.get('/api/projects/tags', async (req, res) => {
            try {
                console.log('üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await getProjectTags();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase
        this.app.get('/api/supabase/projects', async (req, res) => {
            try {
                console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase...');
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Supabase API
                const { getAllProjects, getProjectsWithExternalId } = require('../functions/supabase-client');
                
                const allSupabaseProjects = await getAllProjects();
                const supabaseProjects = await getProjectsWithExternalId();
                
                console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Supabase: ${allSupabaseProjects.length}`);
                console.log(`üîó –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id: ${supabaseProjects.length}`);
                
                res.json({
                    success: true,
                    projects_with_external_id: supabaseProjects,
                    total_projects: allSupabaseProjects.length,
                    external_projects: supabaseProjects.length,
                    local_projects: allSupabaseProjects.length - supabaseProjects.length,
                    message: `–ù–∞–π–¥–µ–Ω–æ ${supabaseProjects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å external_id –∏–∑ ${allSupabaseProjects.length} –æ–±—â–∏—Ö`
                });
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Supabase:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        this.app.post('/api/projects/sync-auto', async (req, res) => {
            try {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await syncProjectsToSupabase();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä)
        this.app.post('/api/projects/update', async (req, res) => {
            try {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                const result = await updateProjectsFromWorksection();
                
                res.json(result);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π –∏–∑ –º–µ—Ç–æ–∫ Worksection
        this.app.post('/api/stages/sync', async (req, res) => {
            try {
                writeLogToFile('üéØ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π...', 'sync');
                console.log('üéØ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π...');
                
                const result = await syncStagesFromWorksection();
                
                writeLogToFile(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'sync');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π: ${error.message}`, 'sync');
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–¥–∏–π:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –∑–∞–¥–∞—á Worksection
        this.app.post('/api/objects/sync', async (req, res) => {
            try {
                writeLogToFile('üì¶ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤...', 'sync');
                console.log('üì¶ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤...');
                
                const result = await syncObjectsFromWorksection();
                
                writeLogToFile(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'sync');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤: ${error.message}`, 'sync');
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ø–æ–¥–∑–∞–¥–∞—á Worksection
        this.app.post('/api/sections/sync', async (req, res) => {
            try {
                writeLogToFile('üìë –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤...', 'sync');
                console.log('üìë –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤...');
                
                const result = await syncSectionsFromWorksection();
                
                writeLogToFile(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'sync');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: ${error.message}`, 'sync');
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        this.app.post('/api/sync/full', async (req, res) => {
            try {
                writeLogToFile('üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...', 'sync');
                console.log('üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ô —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
                
                const result = await this.runFullSync();
                
                // –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                const reportFileName = createSyncReport(result);
                if (reportFileName) {
                    result.report_filename = reportFileName;
                }
                
                writeLogToFile(`‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary)}`, 'sync');
                this.stats.lastSyncDate = new Date().toISOString();
                
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'sync');
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message,
                    logs: [`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`]
                });
            }
        });

        // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        this.app.get('/api/validate/hierarchy', async (req, res) => {
            try {
                writeLogToFile('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏...', 'validation');
                console.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏...');
                
                const result = await validateHierarchyConsistency();
                
                writeLogToFile(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'validation');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${error.message}`, 'validation');
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        this.app.get('/api/report/system-status', async (req, res) => {
            try {
                writeLogToFile('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã...', 'report');
                console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã...');
                
                const result = await generateSystemStatusReport();
                
                writeLogToFile(`‚úÖ –û—Ç—á—ë—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω`, 'report');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: ${error.message}`, 'report');
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π
        this.app.post('/api/maintenance/cleanup-orphaned', async (req, res) => {
            try {
                writeLogToFile('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π...', 'maintenance');
                console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π...');
                
                const result = await cleanupOrphanedRecords(req.body);
                
                writeLogToFile(`‚úÖ –û—á–∏—Å—Ç–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'maintenance');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π: ${error.message}`, 'maintenance');
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ orphaned –∑–∞–ø–∏—Å–µ–π:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });

        // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.app.get('/api/health/sync-status', async (req, res) => {
            try {
                writeLogToFile('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...', 'health');
                console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
                
                const result = await checkSyncHealth();
                
                writeLogToFile(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${JSON.stringify(result.summary || result)}`, 'health');
                res.json(result);

            } catch (error) {
                writeLogToFile(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'health');
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
                res.status(500).json({
                    success: false,
                    error: error.message
                });
            }
        });
    }

    async syncProjects(params = {}) {
        const { makeWorksectionRequest } = require('../functions/worksection-api');
        const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection...');
        
        await delay(1000);
        
        const projects = await makeWorksectionRequest('get_projects');
        if (projects.statusCode !== 200 || projects.data.status !== 'ok') {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection');
        }
        
        const projectsData = projects.data.data || [];
        
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${projectsData.length} –ø—Ä–æ–µ–∫—Ç–æ–≤...`);
        
        await delay(1500);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
        let totalTasks = 0;
        for (let i = 0; i < Math.min(5, projectsData.length); i++) {
            const project = projectsData[i];
            console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${project.name}`);
            
            const tasks = await makeWorksectionRequest('get_tasks', { id_project: project.id });
            if (tasks.statusCode === 200 && tasks.data.status === 'ok') {
                const tasksCount = tasks.data.data?.length || 0;
                totalTasks += tasksCount;
                
                console.log(`   - –ù–∞–π–¥–µ–Ω–æ ${tasksCount} –∑–∞–¥–∞—á`);
            }
            
            await delay(500);
        }
        
        console.log('üíæ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Supabase...');
        
        await delay(1000);
        
        const result = {
            projectsCount: projectsData.length,
            tasksCount: totalTasks,
            duration: '3.2s',
            timestamp: new Date().toISOString()
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.projectsCount = result.projectsCount;
        this.stats.tasksCount = result.tasksCount;
        this.stats.successRequests += 1;
        
        return result;
    }

    async runFullSync() {
        const startTime = Date.now();
        const logs = [];
        const detailedLogs = [];
        const results = {
            projects: null,
            stages: null,
            objects: null,
            sections: null
        };
        
        let totalCreated = 0;
        let totalUpdated = 0;
        let totalUnchanged = 0;
        let totalErrors = 0;
        let warnings = [];
        let criticalErrors = [];
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        const addLog = (message, level = 'info', details = null) => {
            const timestamp = new Date().toISOString();
            const logEntry = `[${timestamp}] ${message}`;
            
            logs.push(logEntry);
            
            if (details) {
                detailedLogs.push({
                    timestamp,
                    level,
                    message,
                    details
                });
            }
            
            console.log(logEntry);
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
        const executeWithRetry = async (operation, operationName, maxRetries = 3, delay = 1000) => {
            for (let attempt = 1; attempt <= maxRetries; attempt++) {
                try {
                    addLog(`üîÑ ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
                    const result = await operation();
                    addLog(`‚úÖ ${operationName} - —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
                    return result;
                } catch (error) {
                    const errorMsg = `‚ùå ${operationName} - –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}/${maxRetries}: ${error.message}`;
                    addLog(errorMsg, 'error', { attempt, maxRetries, error: error.message });
                    
                    if (attempt < maxRetries) {
                        addLog(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                        delay *= 2; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
                    } else {
                        criticalErrors.push(`${operationName}: ${error.message}`);
                        throw error;
                    }
                }
            }
        };
        
        // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const validateSyncResult = (result, entityType) => {
            if (!result) {
                warnings.push(`${entityType}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π`);
                return false;
            }
            
            if (typeof result.success !== 'boolean') {
                warnings.push(`${entityType}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–ª–∞–≥ success –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ`);
                return false;
            }
            
            if (!result.data && !result.summary) {
                warnings.push(`${entityType}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–¥–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ`);
                return false;
            }
            
            return true;
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const collectStats = (result, entityType) => {
            if (!validateSyncResult(result, entityType)) {
                return { created: 0, updated: 0, unchanged: 0, errors: 1 };
            }
            
            const summary = result.summary || {};
            const data = result.data || {};
            
            return {
                created: summary.created || data.created?.length || 0,
                updated: summary.updated || data.updated?.length || 0,
                unchanged: summary.unchanged || data.unchanged?.length || 0,
                errors: summary.errors || data.errors?.length || 0
            };
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const logDetailedResults = (result, entityType, stats) => {
            if (!result || !result.success) return;
            
            const data = result.data || {};
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (data.created && data.created.length > 0) {
                addLog(`  üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ ${entityType.toLowerCase()}:`);
                data.created.slice(0, 10).forEach(item => { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    const name = item[`${entityType.toLowerCase()}_name`] || 
                                item.project_name || 
                                item.section?.section_name || 
                                '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                    const id = item[`${entityType.toLowerCase()}_id`] || 
                              item.project_id || 
                              item.section?.section_id || 
                              'N/A';
                    addLog(`    + ${name} (ID: ${id})`);
                });
                
                if (data.created.length > 10) {
                    addLog(`    ... –∏ –µ—â—ë ${data.created.length - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if (data.updated && data.updated.length > 0) {
                addLog(`  üîÑ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ ${entityType.toLowerCase()}:`);
                data.updated.slice(0, 5).forEach(item => {
                    const name = item[`${entityType.toLowerCase()}_name`] || 
                                item.project_name || 
                                item.section?.section_name || 
                                '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                    addLog(`    ‚Üª ${name}`);
                });
                
                if (data.updated.length > 5) {
                    addLog(`    ... –∏ –µ—â—ë ${data.updated.length - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            if (data.errors && data.errors.length > 0) {
                addLog(`  ‚ùå –û—à–∏–±–∫–∏ ${entityType.toLowerCase()}:`);
                data.errors.slice(0, 5).forEach(error => {
                    const errorMsg = typeof error === 'string' ? error : 
                                   error.error || error.message || JSON.stringify(error);
                    addLog(`    ‚ö†Ô∏è ${errorMsg}`);
                });
                
                if (data.errors.length > 5) {
                    addLog(`    ... –∏ –µ—â—ë ${data.errors.length - 5} –æ—à–∏–±–æ–∫`);
                }
            }
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        const checkAPIAvailability = async () => {
            try {
                addLog('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase...');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase
                const { createClient } = require('@supabase/supabase-js');
                const supabase = createClient(
                    process.env.SUPABASE_URL,
                    process.env.SUPABASE_ANON_KEY
                );
                
                const { data: healthCheck, error } = await supabase
                    .from('projects')
                    .select('project_id')
                    .limit(1);
                
                if (error) {
                    throw new Error(`Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
                }
                
                addLog('‚úÖ Supabase –¥–æ—Å—Ç—É–ø–µ–Ω');
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ Worksection API
                addLog('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Worksection API...');
                const { makeWorksectionRequest } = require('../functions/worksection-api');
                
                try {
                    await makeWorksectionRequest('get_projects', { page: 1 });
                    addLog('‚úÖ Worksection API –¥–æ—Å—Ç—É–ø–µ–Ω');
                } catch (apiError) {
                    throw new Error(`Worksection API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${apiError.message}`);
                }
                
                return true;
            } catch (error) {
                addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: ${error.message}`, 'error');
                return false;
            }
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const validateConfiguration = () => {
            const configErrors = [];
            const configWarnings = [];
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if (!process.env.SUPABASE_URL) configErrors.push('SUPABASE_URL –Ω–µ –∑–∞–¥–∞–Ω');
            if (!process.env.SUPABASE_ANON_KEY) configErrors.push('SUPABASE_ANON_KEY –Ω–µ –∑–∞–¥–∞–Ω');
            if (!process.env.WORKSECTION_HASH) configErrors.push('WORKSECTION_HASH –Ω–µ –∑–∞–¥–∞–Ω');
            if (!process.env.WORKSECTION_DOMAIN) configErrors.push('WORKSECTION_DOMAIN –Ω–µ –∑–∞–¥–∞–Ω');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if (process.env.SUPABASE_URL && !process.env.SUPABASE_URL.startsWith('https://')) {
                configWarnings.push('URL Supabase –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://');
            }
            
            if (process.env.WORKSECTION_DOMAIN && !process.env.WORKSECTION_DOMAIN.includes('.worksection.')) {
                configWarnings.push('–î–æ–º–µ–Ω Worksection –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å .worksection.');
            }
            
            if (process.env.WORKSECTION_HASH && process.env.WORKSECTION_HASH.length !== 32) {
                configWarnings.push('API –∫–ª—é—á Worksection –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const optionalVars = {
                'SYNC_BATCH_SIZE': '–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
                'SYNC_REQUEST_DELAY': '–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏',
                'SYNC_MAX_RETRIES': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫'
            };
            
            Object.entries(optionalVars).forEach(([varName, description]) => {
                if (!process.env[varName]) {
                    configWarnings.push(`${varName} –Ω–µ –∑–∞–¥–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (${description})`);
                }
            });
            
            return { errors: configErrors, warnings: configWarnings };
        };
        
        try {
            addLog('üöÄ === –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===');
            addLog(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString('ru-RU')}`);
            addLog(`üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${process.platform}`);
            addLog(`üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`);
            addLog(`üîó URL Supabase: ${process.env.SUPABASE_URL ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
            addLog(`üîë API –∫–ª—é—á Worksection: ${process.env.WORKSECTION_HASH ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
            addLog(`üåê –î–æ–º–µ–Ω Worksection: ${process.env.WORKSECTION_DOMAIN ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}`);
            addLog('');
            
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            addLog('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...');
            const configValidation = validateConfiguration();
            
            if (configValidation.errors.length > 0) {
                configValidation.errors.forEach(error => addLog(`‚ùå ${error}`, 'error'));
                throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${configValidation.errors.join(', ')}`);
            }
            
            if (configValidation.warnings.length > 0) {
                addLog('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
                configValidation.warnings.forEach(warning => {
                    addLog(`  ‚ö†Ô∏è ${warning}`);
                    warnings.push(warning);
                });
                addLog('');
            } else {
                addLog('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            const apiAvailable = await checkAPIAvailability();
            if (!apiAvailable) {
                throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            }
            
            addLog('');
            
            // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–∞—è)
            addLog('üè¢ –≠–¢–ê–ü 1/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
            try {
                results.projects = await executeWithRetry(
                    () => syncProjectsToSupabase(),
                    '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤'
                );
                
                const projectStats = collectStats(results.projects, 'Project');
                totalCreated += projectStats.created;
                totalUpdated += projectStats.updated;
                totalUnchanged += projectStats.unchanged;
                totalErrors += projectStats.errors;
                
                addLog(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ ${projectStats.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${projectStats.updated}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ${projectStats.unchanged}, –æ—à–∏–±–æ–∫ ${projectStats.errors}`);
                
                logDetailedResults(results.projects, 'Project', projectStats);
                
                if (projectStats.created === 0 && projectStats.updated === 0 && projectStats.unchanged === 0) {
                    warnings.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–∫—É "eneca.work sync"');
                }
                
            } catch (error) {
                addLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${error.message}`, 'error');
                totalErrors++;
                criticalErrors.push(`–ü—Ä–æ–µ–∫—Ç—ã: ${error.message}`);
                
                // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å, –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
                addLog('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ –ë–î...');
            }
            
            addLog('');
            
            // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π
            addLog('üéØ –≠–¢–ê–ü 2/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π...');
            try {
                results.stages = await executeWithRetry(
                    () => syncStagesFromWorksection(),
                    '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞–¥–∏–π'
                );
                
                const stageStats = collectStats(results.stages, 'Stage');
                totalCreated += stageStats.created;
                totalUpdated += stageStats.updated;
                totalUnchanged += stageStats.unchanged;
                totalErrors += stageStats.errors;
                
                addLog(`‚úÖ –°—Ç–∞–¥–∏–∏: —Å–æ–∑–¥–∞–Ω–æ ${stageStats.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${stageStats.updated}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ${stageStats.unchanged}, –æ—à–∏–±–æ–∫ ${stageStats.errors}`);
                
                logDetailedResults(results.stages, 'Stage', stageStats);
                
                if (stageStats.created === 0 && stageStats.updated === 0 && stageStats.unchanged === 0) {
                    warnings.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–¥–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
                }
                
            } catch (error) {
                addLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞–¥–∏–π: ${error.message}`, 'error');
                totalErrors++;
                criticalErrors.push(`–°—Ç–∞–¥–∏–∏: ${error.message}`);
            }
            
            addLog('');
            
            // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            addLog('üì¶ –≠–¢–ê–ü 3/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...');
            try {
                results.objects = await executeWithRetry(
                    () => syncObjectsFromWorksection(),
                    '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤'
                );
                
                const objectStats = collectStats(results.objects, 'Object');
                totalCreated += objectStats.created;
                totalUpdated += objectStats.updated;
                totalUnchanged += objectStats.unchanged;
                totalErrors += objectStats.errors;
                
                addLog(`‚úÖ –û–±—ä–µ–∫—Ç—ã: —Å–æ–∑–¥–∞–Ω–æ ${objectStats.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${objectStats.updated}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ${objectStats.unchanged}, –æ—à–∏–±–æ–∫ ${objectStats.errors}`);
                
                logDetailedResults(results.objects, 'Object', objectStats);
                
                if (objectStats.created === 0 && objectStats.updated === 0 && objectStats.unchanged === 0) {
                    warnings.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö');
                }
                
            } catch (error) {
                addLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤: ${error.message}`, 'error');
                totalErrors++;
            }
            
            addLog('');
            
            // 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
            addLog('üìë –≠–¢–ê–ü 4/4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤...');
            try {
                results.sections = await executeWithRetry(
                    () => syncSectionsFromWorksection(),
                    '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤'
                );
                
                const sectionStats = collectStats(results.sections, 'Section');
                totalCreated += sectionStats.created;
                totalUpdated += sectionStats.updated;
                totalUnchanged += sectionStats.unchanged;
                totalErrors += sectionStats.errors;
                
                addLog(`‚úÖ –†–∞–∑–¥–µ–ª—ã: —Å–æ–∑–¥–∞–Ω–æ ${sectionStats.created}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${sectionStats.updated}, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ${sectionStats.unchanged}, –æ—à–∏–±–æ–∫ ${sectionStats.errors}`);
                
                logDetailedResults(results.sections, 'Section', sectionStats);
                
                if (sectionStats.created === 0 && sectionStats.updated === 0 && sectionStats.unchanged === 0) {
                    warnings.push('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∑–∞–¥–∞—á–∏');
                }
                
            } catch (error) {
                addLog(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤: ${error.message}`, 'error');
                totalErrors++;
            }
            
            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑
            const duration = Date.now() - startTime;
            const durationSeconds = (duration / 1000).toFixed(1);
            const totalOperations = totalCreated + totalUpdated + totalUnchanged + totalErrors;
            
            addLog('');
            addLog('üèÅ === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===');
            addLog(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${durationSeconds} —Å–µ–∫`);
            addLog(`üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalOperations}`);
            addLog(`üÜï –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${totalCreated}`);
            addLog(`üîÑ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${totalUpdated}`);
            addLog(`‚úÖ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalUnchanged}`);
            addLog(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
            
            // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (totalOperations > 0) {
                const operationsPerSecond = (totalOperations / (duration / 1000)).toFixed(1);
                addLog(`‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${operationsPerSecond} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`);
                
                // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                if (operationsPerSecond < 5) {
                    warnings.push('–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
                } else if (operationsPerSecond > 50) {
                    addLog('üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!');
                }
            }
            
            // –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            addLog('');
            addLog('üîç –ü–û–°–¢–ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•...');
            try {
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                const { validateHierarchyConsistency } = require('../functions/projects');
                
                const hierarchyCheck = await validateHierarchyConsistency();
                if (hierarchyCheck.success && hierarchyCheck.data) {
                    const data = hierarchyCheck.data;
                    const issues = (data.orphaned_stages?.length || 0) + 
                                   (data.orphaned_objects?.length || 0) + 
                                   (data.orphaned_sections?.length || 0) + 
                                   (data.duplicate_external_ids?.length || 0);
                    
                    if (issues === 0) {
                        addLog('‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - orphaned –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    } else {
                        addLog(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${issues}`);
                        if (data.orphaned_stages?.length > 0) {
                            addLog(`  üìù Orphaned —Å—Ç–∞–¥–∏–π: ${data.orphaned_stages.length}`);
                        }
                        if (data.orphaned_objects?.length > 0) {
                            addLog(`  üì¶ Orphaned –æ–±—ä–µ–∫—Ç–æ–≤: ${data.orphaned_objects.length}`);
                        }
                        if (data.orphaned_sections?.length > 0) {
                            addLog(`  üìë Orphaned —Ä–∞–∑–¥–µ–ª–æ–≤: ${data.orphaned_sections.length}`);
                        }
                        if (data.duplicate_external_ids?.length > 0) {
                            addLog(`  üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ external_id: ${data.duplicate_external_ids.length}`);
                        }
                        warnings.push('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞');
                    }
                } else {
                    addLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
                    warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö');
                }
            } catch (error) {
                addLog(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
                warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏');
            }
            
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            addLog('');
            addLog('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:');
            
            const recommendations = [];
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (totalOperations > 0 && (totalOperations / (duration / 1000)) < 10) {
                recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ SYNC_BATCH_SIZE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            }
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º
            if (totalErrors > 0) {
                recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π');
            }
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º
            if (totalCreated === 0 && totalUpdated === 0) {
                recommendations.push('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç—ã –≤ Worksection –∏–º–µ—é—Ç –º–µ—Ç–∫—É "eneca.work sync"');
            }
            
            if (recommendations.length > 0) {
                recommendations.forEach((rec, index) => {
                    addLog(`  ${index + 1}. ${rec}`);
                });
            } else {
                addLog('  ‚ú® –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç');
            }
            
            // –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if (warnings.length > 0) {
                addLog('');
                addLog('‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
                warnings.forEach((warning, index) => {
                    addLog(`  ${index + 1}. ${warning}`);
                });
            }
            
            // –í—ã–≤–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (criticalErrors.length > 0) {
                addLog('');
                addLog('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:');
                criticalErrors.forEach((error, index) => {
                    addLog(`  ${index + 1}. ${error}`);
                });
            }
            
            addLog(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
            
            const success = totalErrors === 0 && criticalErrors.length === 0;
            const hasWarnings = warnings.length > 0;
            
            if (success && !hasWarnings) {
                addLog('üéâ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
            } else if (success && hasWarnings) {
                addLog('‚úÖ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò');
            } else {
                addLog('‚ö†Ô∏è –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò');
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            const report = {
                success,
                duration: durationSeconds,
                summary: {
                    total_operations: totalOperations,
                    created: totalCreated,
                    updated: totalUpdated,
                    unchanged: totalUnchanged,
                    errors: totalErrors,
                    warnings: warnings.length,
                    critical_errors: criticalErrors.length,
                    performance: totalOperations > 0 ? 
                        parseFloat((totalOperations / (duration / 1000)).toFixed(1)) : 0
                },
                details: {
                    projects: results.projects,
                    stages: results.stages,
                    objects: results.objects,
                    sections: results.sections
                },
                issues: {
                    warnings,
                    critical_errors: criticalErrors
                },
                logs,
                detailed_logs: detailedLogs,
                metadata: {
                    timestamp: new Date().toISOString(),
                    duration_ms: duration,
                    environment: {
                        platform: process.platform,
                        node_version: process.version,
                        working_directory: process.cwd()
                    },
                    configuration: {
                        supabase_configured: !!process.env.SUPABASE_URL,
                        worksection_configured: !!process.env.WORKSECTION_HASH,
                        retry_attempts: 3
                    }
                }
            };
            
            return report;
            
        } catch (error) {
            const duration = Date.now() - startTime;
            const durationSeconds = (duration / 1000).toFixed(1);
            
            addLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: ${error.message}`, 'error');
            criticalErrors.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            
            return {
                success: false,
                error: error.message,
                duration: durationSeconds,
                summary: {
                    total_operations: totalCreated + totalUpdated + totalUnchanged + totalErrors + 1,
                    created: totalCreated,
                    updated: totalUpdated,
                    unchanged: totalUnchanged,
                    errors: totalErrors + 1,
                    warnings: warnings.length,
                    critical_errors: criticalErrors.length,
                    performance: 0
                },
                details: results,
                issues: {
                    warnings,
                    critical_errors: criticalErrors
                },
                logs,
                detailed_logs: detailedLogs,
                metadata: {
                    timestamp: new Date().toISOString(),
                    duration_ms: duration,
                    environment: {
                        platform: process.platform,
                        node_version: process.version,
                        working_directory: process.cwd()
                    },
                    configuration: {
                        supabase_configured: !!process.env.SUPABASE_URL,
                        worksection_configured: !!process.env.WORKSECTION_HASH,
                        retry_attempts: 3
                    }
                }
            };
        }
    }

    updateStats(type, duration, success) {
        this.stats.totalRequests += 1;
        
        if (success) {
            this.stats.successRequests += 1;
        } else {
            this.stats.errorRequests += 1;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if (this.stats.avgResponseTime === 0) {
            this.stats.avgResponseTime = duration;
        } else {
            this.stats.avgResponseTime = Math.round(
                (this.stats.avgResponseTime + duration) / 2
            );
        }
    }

    setupErrorHandling() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
        this.app.use((req, res) => {
            res.status(404).json({
                success: false,
                error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        });

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.app.use((err, req, res, next) => {
            console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
            
            res.status(500).json({
                success: false,
                error: err.message
            });
        });
    }

    start() {
        const port = process.env.PORT || 3001;
        const host = process.env.HOST || 'localhost';
        
        this.app.listen(port, host, () => {
            console.log(`üöÄ WS-to-Work —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${host}:${port}`);
            console.log(`üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${host}:${port}`);
            console.log(`üîå API –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π`);
        });
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
    const app = new WSToWorkApp();
    app.start();
}

module.exports = WSToWorkApp; 
const worksection = require('../services/worksection');
const supabase = require('../services/supabase');
const logger = require('../utils/logger');

async function syncObjects(stats, offset = 0, limit = 3) {
  try {
    const supaProjects = await supabase.getProjectsWithExternalId();
    const existingObjects = await supabase.getObjects();
    
    // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ø–æ–ª—É—á–∞–µ–º wsProjects –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const wsProjects = await worksection.getProjectsWithSyncTags();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º offset –∏ limit –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginatedProjects = supaProjects.slice(offset, offset + limit);
    logger.warning(`‚ö†Ô∏è Objects: Processing projects ${offset + 1}-${offset + paginatedProjects.length} of ${supaProjects.length} total`);
    
    for (const project of paginatedProjects) {
      logger.info(`üì¶ Syncing objects for project: ${project.project_name}`);
      
      // –ß–∏—Ç–∞–µ–º —Å—Ç–∞–¥–∏–∏ –∑–∞–Ω–æ–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–Ω–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –≤ syncStages)
      const existingStages = await supabase.getStages();
      
      // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const wsProject = wsProjects.find(p => 
        p.id && p.id.toString() === project.external_id.toString()
      );
      
      if (!wsProject) {
        logger.warning(`Project not found in Worksection: ${project.project_name}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const syncType = worksection.determineProjectSyncType(wsProject);
      logger.info(`üì¶ Project "${project.project_name}" sync type: ${syncType}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      let projectStage = null;
      if (wsProject && wsProject.tags) {
        // –ò—â–µ–º –º–µ—Ç–∫—É —Å—Ç–∞–¥–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        for (const [tagId, tagName] of Object.entries(wsProject.tags)) {
          if (tagName && tagName.includes('–°—Ç–∞–¥–∏—è')) {
            // –ò—â–µ–º —Å—Ç–∞–¥–∏—é –î–õ–Ø –≠–¢–û–ì–û –ü–†–û–ï–ö–¢–ê —Å —ç—Ç–∏–º tag ID
            projectStage = existingStages.find(stage => 
              stage.stage_project_id === project.project_id && 
              stage.external_id === tagId
            );
            
            if (projectStage) {
              logger.info(`Found stage for project ${project.project_name}: ${tagName}`);
              break;
            }
          }
        }
      }
      
      if (!projectStage) {
        logger.warning(`No stage found for project: ${project.project_name}. Skipping objects.`);
        continue;
      }
      
      // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (syncType === 'os') {
        // OS –ø—Ä–æ–µ–∫—Ç—ã: —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        logger.info(`üì¶ OS Project: Creating placeholder object for project ${project.project_name}`);
        
        const placeholderExternalId = `${project.external_id}_${projectStage.external_id}_placeholder`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É
        const existingPlaceholder = existingObjects.find(obj => 
          obj.external_id === placeholderExternalId && 
          obj.external_source === 'worksection-os' &&
          obj.object_stage_id === projectStage.stage_id
        );
        
        if (!existingPlaceholder) {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É
          const placeholderObject = {
            object_name: project.project_name,
            object_description: `–û–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è OS –ø—Ä–æ–µ–∫—Ç–∞: ${project.project_name}`,
            object_stage_id: projectStage.stage_id,
            external_id: placeholderExternalId,
            external_source: 'worksection-os'
          };
          
          try {
            const createdObject = await supabase.upsertObjectByKey(
              project.project_id,
              projectStage.stage_id,
              'worksection-os',
              placeholderExternalId,
              {
                object_name: project.project_name,
                object_description: `–û–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è OS –ø—Ä–æ–µ–∫—Ç–∞: ${project.project_name}`
              }
            );
            
            if (createdObject) {
              logger.success(`‚úÖ Created OS placeholder object: ${project.project_name} in stage ${projectStage.stage_name}`);
              stats.objects.created++;
              
              if (!stats.detailed_report) stats.detailed_report = { actions: [] };
              stats.detailed_report.actions.push({
                type: 'object',
                action: 'created',
                name: project.project_name + ' (placeholder)',
                stage: projectStage.stage_name,
                project: project.project_name,
                external_id: placeholderExternalId,
                sync_type: 'os'
              });
            }
          } catch (error) {
            logger.error(`Failed to create OS placeholder object ${project.project_name}: ${error.message}`);
            stats.objects.errors++;
          }
        } else {
          logger.info(`‚úÖ OS placeholder object already exists: ${project.project_name}`);
          stats.objects.unchanged++;
        }
        
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å task groups
        logger.info(`üì¶ Standard Project: Processing task groups for ${project.project_name}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Worksection
        const wsTasks = await worksection.getProjectTasks(project.external_id);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º Task Groups (–∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏) –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
        const taskGroups = wsTasks.filter(task => 
          task.child && task.child.length > 0 && !task.name.startsWith('!')
        );
        
        logger.info(`Found ${taskGroups.length} task groups for project ${project.project_name}`);
      
      for (const taskGroup of taskGroups) {
        if (taskGroup.status !== 'active') {
          logger.info(`üö´ Skipping inactive task group: ${taskGroup.name}`);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –í –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–ê–î–ò–ò
        const existingObject = existingObjects.find(obj => 
          obj.external_id === taskGroup.id.toString() && 
          obj.external_source === 'worksection' &&
          obj.object_stage_id === projectStage.stage_id  // –û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏!
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—ä–µ–∫—Ç –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–¥–∏—è—Ö (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)
        const objectInWrongStage = existingObjects.find(obj => 
          obj.external_id === taskGroup.id.toString() && 
          obj.external_source === 'worksection' &&
          obj.object_stage_id !== projectStage.stage_id  // –û–±—ä–µ–∫—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏
        );
        
        if (existingObject) {
          logger.info(`‚úÖ Object already exists in correct stage: ${taskGroup.name}`);
          continue;
        }
        
        if (objectInWrongStage) {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞–¥–∏—é
          logger.info(`üîÑ Moving object to correct stage: ${taskGroup.name}`);
          
          const updateData = {
            object_stage_id: projectStage.stage_id,
            object_name: taskGroup.name,  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            object_description: taskGroup.text || '',
            external_updated_at: new Date().toISOString()
          };
          
          try {
            await supabase.updateObject(objectInWrongStage.object_id, updateData);
            logger.success(`‚úÖ Moved object: ${taskGroup.name} to stage ${projectStage.stage_name}`);
            stats.objects.updated++;
            
            if (!stats.detailed_report) stats.detailed_report = { actions: [] };
            stats.detailed_report.actions.push({
              type: 'object',
              action: 'moved',
              name: taskGroup.name,
              stage: projectStage.stage_name,
              project: project.project_name,
              external_id: taskGroup.id.toString()
            });
          } catch (error) {
            logger.error(`Failed to move object ${taskGroup.name}: ${error.message}`);
            stats.objects.errors++;
          }
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        const newObjectData = {
          object_name: taskGroup.name,
          object_description: taskGroup.text || ''
        };
        
        try {
          const createdObject = await supabase.upsertObjectByKey(
            project.project_id,
            projectStage.stage_id,
            'worksection',
            taskGroup.id.toString(),
            newObjectData
          );
          
          if (createdObject) {
            logger.success(`‚úÖ Created object: ${taskGroup.name} in stage ${projectStage.stage_name}`);
            stats.objects.created++;
            
            if (!stats.detailed_report) stats.detailed_report = { actions: [] };
            stats.detailed_report.actions.push({
              type: 'object',
              action: 'created',
              name: taskGroup.name,
              stage: projectStage.stage_name,
              project: project.project_name,
              external_id: taskGroup.id.toString()
            });
          }
        } catch (error) {
          logger.error(`Failed to create object ${taskGroup.name}: ${error.message}`);
          stats.objects.errors++;
        }
      }
      } // –∫–æ–Ω–µ—Ü else –±–ª–æ–∫–∞ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    }
    
    logger.success(`‚úÖ Objects sync completed`);
    
  } catch (error) {
    logger.error(`Objects sync error: ${error.message}`);
    throw error;
  }
}

async function syncSections(stats, offset = 0, limit = 3) {
  try {
    const supaProjects = await supabase.getProjectsWithExternalId();
    const existingObjects = await supabase.getObjects();
    const existingSections = await supabase.getSections();
    
    // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ø–æ–ª—É—á–∞–µ–º wsProjects –û–î–ò–ù —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const wsProjects = await worksection.getProjectsWithSyncTags();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º offset –∏ limit –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const paginatedProjects = supaProjects.slice(offset, offset + limit);
    logger.warning(`‚ö†Ô∏è Sections: Processing projects ${offset + 1}-${offset + paginatedProjects.length} of ${supaProjects.length} total`);
    
    for (const project of paginatedProjects) {
      logger.info(`üìë Syncing sections for project: ${project.project_name}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      const wsProject = wsProjects.find(p => 
        p.id && p.id.toString() === project.external_id.toString()
      );
      
      if (!wsProject) {
        logger.warning(`Project not found in Worksection: ${project.project_name}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const syncType = worksection.determineProjectSyncType(wsProject);
      logger.info(`üìë Project "${project.project_name}" sync type: ${syncType}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Worksection
      const wsTasks = await worksection.getProjectTasks(project.external_id);
      
      // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (syncType === 'os') {
        // OS –ø—Ä–æ–µ–∫—Ç—ã: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ã (–Ω–µ –ø–æ–¥–∑–∞–¥–∞—á–∏)
        logger.info(`üìë OS Project: Processing all tasks as sections for ${project.project_name}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ task groups), –∏—Å–∫–ª—é—á–∞—è –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
        const allTasks = wsTasks.filter(task => 
          task.status === 'active' && !task.name.startsWith('!')
        );
        
        logger.info(`Found ${allTasks.length} active tasks for OS project ${project.project_name}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        const placeholderObject = existingObjects.find(obj => 
          obj.external_source === 'worksection-os' &&
          obj.external_id.includes(project.external_id + '_') &&
          obj.external_id.includes('_placeholder')
        );
        
        if (!placeholderObject) {
          logger.warning(`OS placeholder object not found for project: ${project.project_name}`);
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ã
        for (const wsTask of allTasks) {
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ –∫–ª—é—á—É (–ø—Ä–æ–µ–∫—Ç + –∏—Å—Ç–æ—á–Ω–∏–∫ + –≤–Ω–µ—à–Ω–∏–π id)
          const existing = existingSections.find(s =>
            s.section_project_id === project.project_id &&
            s.external_source === 'worksection-os' &&
            s.external_id && s.external_id.toString() === wsTask.id.toString()
          );
          
          if (existing) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const responsible = await findUserByEmail(wsTask.user_to?.email, stats);
            
            const hasChanges = 
              existing.section_name !== wsTask.name ||
              existing.section_description !== (wsTask.text || null) ||
              existing.section_start_date !== (wsTask.date_start || null) ||
              existing.section_end_date !== (wsTask.date_end || null) ||
              existing.section_object_id !== placeholderObject.object_id ||
              (responsible && existing.section_responsible !== responsible.user_id) ||
              (!responsible && existing.section_responsible !== null);
            
            if (hasChanges) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
              const updateData = {
                section_name: wsTask.name,
                section_description: wsTask.text || null,
                section_object_id: placeholderObject.object_id,
                section_project_id: project.project_id,
                section_start_date: wsTask.date_start || null,
                section_end_date: wsTask.date_end || null,
                external_updated_at: new Date().toISOString()
              };
              
              if (responsible) {
                updateData.section_responsible = responsible.user_id;
                logger.info(`üë§ Assigned responsible to OS section "${wsTask.name}": ${responsible.first_name} ${responsible.last_name}`);
              } else if (existing.section_responsible !== null) {
                updateData.section_responsible = null;
                logger.info(`üë§ Removed responsible from OS section "${wsTask.name}"`);
              }
              
              await supabase.updateSection(existing.section_id, updateData);
              stats.sections.updated++;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
              if (!stats.detailed_report) stats.detailed_report = { actions: [] };
              stats.detailed_report.actions.push({
                action: 'updated',
                type: 'section',
                id: wsTask.id,
                name: wsTask.name,
                object: placeholderObject.object_name,
                project: project.project_name,
                timestamp: new Date().toISOString(),
                sync_type: 'os',
                responsible_assigned: !!responsible,
                responsible_info: responsible ? `${responsible.first_name} ${responsible.last_name} (${responsible.email})` : null,
                dates: {
                  start: wsTask.date_start || null,
                  end: wsTask.date_end || null
                }
              });
              
              logger.success(`Updated OS section: ${wsTask.name} (object: ${placeholderObject.object_name})`);
            } else {
              // –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
              stats.sections.unchanged++;
              logger.info(`‚úÖ OS section unchanged: ${wsTask.name}`);
            }
            
          } else {
            // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è upsert (–±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π)
            const sectionData = {
              section_name: wsTask.name,
              section_description: wsTask.text || null,
              section_object_id: placeholderObject.object_id,
              section_start_date: wsTask.date_start || null,
              section_end_date: wsTask.date_end || null,
              external_updated_at: new Date().toISOString()
            };
            
            // Find and assign responsible using enhanced search
            const responsible = await findUserByEmail(wsTask.user_to?.email, stats);
            if (responsible) {
              sectionData.section_responsible = responsible.user_id;
              logger.info(`üë§ Assigned responsible to new OS section "${wsTask.name}": ${responsible.first_name} ${responsible.last_name}`);
            }
            
            // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π upsert —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            await supabase.upsertSectionByKey(
              project.project_id,
              'worksection-os',
              wsTask.id.toString(),
              sectionData
            );
            stats.sections.created++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
            if (!stats.detailed_report) stats.detailed_report = { actions: [] };
            stats.detailed_report.actions.push({
              action: 'created',
              type: 'section',
              id: wsTask.id,
              name: wsTask.name,
              object: placeholderObject.object_name,
              project: project.project_name,
              timestamp: new Date().toISOString(),
              sync_type: 'os',
              responsible_assigned: !!responsible,
              responsible_info: responsible ? `${responsible.first_name} ${responsible.last_name} (${responsible.email})` : null,
              dates: {
                start: wsTask.date_start || null,
                end: wsTask.date_end || null
              }
            });
            
            logger.success(`Created OS section: ${wsTask.name} (object: ${placeholderObject.object_name})`);
          }
        }
        
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å task groups –∏ –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏
        logger.info(`üìë Standard Project: Processing task groups and subtasks for ${project.project_name}`);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º Task Groups (–∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–∑–∞–¥–∞—á–∞–º–∏)
        const taskGroups = wsTasks.filter(task => 
          task.child && task.child.length > 0 && !task.name.startsWith('!')
        );
        
        for (const taskGroup of taskGroups) {
        if (taskGroup.status !== 'active') continue;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –≤ –ë–î
        const object = existingObjects.find(obj => 
          obj.external_id && obj.external_id.toString() === taskGroup.id.toString()
        );
        
        if (!object) {
          logger.warning(`Object not found for task group: ${taskGroup.name}`);
          continue;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
        const filteredSubtasks = taskGroup.child.filter(subtask => {
          if (subtask.name && subtask.name.startsWith('!')) {
            logger.info(`üö´ Skipping section starting with "!": ${subtask.name}`);
            stats.sections.skipped = (stats.sections.skipped || 0) + 1;
            return false;
          }
          return true;
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª—ã
        for (const wsSubtask of filteredSubtasks) {
          if (wsSubtask.status !== 'active') continue;
          
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ –∫–ª—é—á—É (–ø—Ä–æ–µ–∫—Ç + –∏—Å—Ç–æ—á–Ω–∏–∫ + –≤–Ω–µ—à–Ω–∏–π id)
          const existing = existingSections.find(s =>
            s.section_project_id === project.project_id &&
            s.external_source === 'worksection' &&
            s.external_id && s.external_id.toString() === wsSubtask.id.toString()
          );
          
          if (existing) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const responsible = await findUserByEmail(wsSubtask.user_to?.email, stats);
            
            const hasChanges = 
              existing.section_name !== wsSubtask.name ||
              existing.section_description !== (wsSubtask.text || null) ||
              existing.section_start_date !== (wsSubtask.date_start || null) ||
              existing.section_end_date !== (wsSubtask.date_end || null) ||
              existing.section_object_id !== object.object_id ||
              (responsible && existing.section_responsible !== responsible.user_id) ||
              (!responsible && existing.section_responsible !== null);
            
            if (hasChanges) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
              const updateData = {
                section_name: wsSubtask.name,
                section_description: wsSubtask.text || null,
                section_object_id: object.object_id,
                section_project_id: project.project_id,  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º project_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                section_start_date: wsSubtask.date_start || null,
                section_end_date: wsSubtask.date_end || null,
                external_updated_at: new Date().toISOString()
              };
              
              if (responsible) {
                updateData.section_responsible = responsible.user_id;
                logger.info(`üë§ Assigned responsible to section "${wsSubtask.name}": ${responsible.first_name} ${responsible.last_name}`);
              } else if (existing.section_responsible !== null) {
                updateData.section_responsible = null;
                logger.info(`üë§ Removed responsible from section "${wsSubtask.name}"`);
              }
              
              await supabase.updateSection(existing.section_id, updateData);
              stats.sections.updated++;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
              if (!stats.detailed_report) stats.detailed_report = { actions: [] };
              stats.detailed_report.actions.push({
                action: 'updated',
                type: 'section',
                id: wsSubtask.id,
                name: wsSubtask.name,
                object: object.object_name,
                project: project.project_name,
                timestamp: new Date().toISOString(),
                responsible_assigned: !!responsible,
                responsible_info: responsible ? `${responsible.first_name} ${responsible.last_name} (${responsible.email})` : null,
                dates: {
                  start: wsSubtask.date_start || null,
                  end: wsSubtask.date_end || null
                }
              });
              
              logger.success(`Updated section: ${wsSubtask.name} (object: ${object.object_name})`);
            } else {
              // –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
              stats.sections.unchanged++;
              logger.info(`‚úÖ Section unchanged: ${wsSubtask.name}`);
            }
            
          } else {
            // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è upsert (–±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π)
            const sectionData = {
              section_name: wsSubtask.name,
              section_description: wsSubtask.text || null,
              section_object_id: object.object_id,
              section_start_date: wsSubtask.date_start || null,
              section_end_date: wsSubtask.date_end || null,
              external_updated_at: new Date().toISOString()
            };
            
            // Find and assign responsible using enhanced search
            const responsible = await findUserByEmail(wsSubtask.user_to?.email, stats);
            if (responsible) {
              sectionData.section_responsible = responsible.user_id;
              logger.info(`üë§ Assigned responsible to new section "${wsSubtask.name}": ${responsible.first_name} ${responsible.last_name}`);
            }
            
            // –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π upsert —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
            await supabase.upsertSectionByKey(
              project.project_id,
              'worksection',
              wsSubtask.id.toString(),
              sectionData
            );
            stats.sections.created++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
            if (!stats.detailed_report) stats.detailed_report = { actions: [] };
            stats.detailed_report.actions.push({
              action: 'created',
              type: 'section',
              id: wsSubtask.id,
              name: wsSubtask.name,
              object: object.object_name,
              project: project.project_name,
              timestamp: new Date().toISOString(),
              responsible_assigned: !!responsible,
              responsible_info: responsible ? `${responsible.first_name} ${responsible.last_name} (${responsible.email})` : null,
              dates: {
                start: wsSubtask.date_start || null,
                end: wsSubtask.date_end || null
              }
            });
            
            logger.success(`Created section: ${wsSubtask.name} (object: ${object.object_name})`);
          }
        }
      }
      } // –∫–æ–Ω–µ—Ü else –±–ª–æ–∫–∞ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    }
    
    logger.success(`‚úÖ Sections sync completed`);
    
  } catch (error) {
    logger.error(`Sections sync error: ${error.message}`);
    throw error;
  }
}

async function findUserByEmail(email, stats) {
  if (!email) return null;
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!stats.user_search) {
      stats.user_search = {
        total_searches: 0,
        successful_by_email: 0,
        successful_by_email_part: 0,
        successful_by_name: 0,
        successful_by_name_parts: 0,
        successful_by_fuzzy: 0,
        failed: 0,
        errors: 0,
        empty_queries: 0,
        searches: []
      };
    }
    
    stats.assignments.attempted++;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
    const user = await supabase.findUser(email, stats);
    if (user) {
      stats.assignments.successful++;
      logger.info(`üë§ Found user: ${user.first_name} ${user.last_name} (${email})`);
      return user;
    }
    
    stats.assignments.failed++;
    logger.warning(`üë§ User not found: ${email}`);
    return null;
    
  } catch (error) {
    stats.assignments.failed++;
    logger.error(`üë§ Error finding user ${email}: ${error.message}`);
    return null;
  }
}

module.exports = { syncObjects, syncSections }; 
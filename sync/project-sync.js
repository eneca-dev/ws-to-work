const worksection = require('../services/worksection');
const supabase = require('../services/supabase');
const logger = require('../utils/logger');

async function syncProjects(stats) {
  try {
    const wsProjects = await worksection.getProjectsWithTag();
    const supaProjects = await supabase.getProjects();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
    const filteredProjects = wsProjects.filter(project => {
      if (project.name && project.name.startsWith('!')) {
        logger.info(`üö´ Skipping project starting with "!": ${project.name}`);
        stats.projects.skipped = (stats.projects.skipped || 0) + 1;
        return false;
      }
      return true;
    });
    
    logger.info(`Found ${wsProjects.length} projects with sync tag (${filteredProjects.length} after filtering)`);
    
    for (const wsProject of filteredProjects) {
      try {
        const existing = supaProjects.find(p => 
          p.external_id && p.external_id.toString() === wsProject.id.toString()
        );
        
        if (existing) {
          // Update existing project
          const updateData = {
            project_name: wsProject.name,
            project_description: wsProject.description || null,
            external_updated_at: new Date().toISOString()
          };
          
          // Find and assign manager using enhanced search
          const manager = await findUserByEmail(wsProject.user_from?.email, stats);
          if (manager) {
            updateData.project_manager = manager.user_id;
            logger.info(`üë§ Assigned manager to project "${wsProject.name}": ${manager.first_name} ${manager.last_name}`);
          }
          
          await supabase.updateProject(existing.project_id, updateData);
          stats.projects.updated++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç—á–µ—Ç
          if (!stats.detailed_report) stats.detailed_report = { actions: [] };
          stats.detailed_report.actions.push({
            action: 'updated',
            type: 'project',
            id: wsProject.id,
            name: wsProject.name,
            timestamp: new Date().toISOString(),
            manager_assigned: !!manager,
            manager_info: manager ? `${manager.first_name} ${manager.last_name} (${manager.email})` : null
          });
          
          logger.success(`Updated project: ${wsProject.name}`);
          
        } else {
          // Create new project
          const projectData = {
            project_name: wsProject.name,
            project_description: wsProject.description || null,
            external_id: wsProject.id.toString(),
            external_source: 'worksection',
            external_updated_at: new Date().toISOString()
          };
          
          // Find and assign manager using enhanced search
          const manager = await findUserByEmail(wsProject.user_from?.email, stats);
          if (manager) {
            projectData.project_manager = manager.user_id;
            logger.info(`üë§ Assigned manager to new project "${wsProject.name}": ${manager.first_name} ${manager.last_name}`);
          }
          
          await supabase.createProject(projectData);
          stats.projects.created++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç—á–µ—Ç
          if (!stats.detailed_report) stats.detailed_report = { actions: [] };
          stats.detailed_report.actions.push({
            action: 'created',
            type: 'project',
            id: wsProject.id,
            name: wsProject.name,
            timestamp: new Date().toISOString(),
            manager_assigned: !!manager,
            manager_info: manager ? `${manager.first_name} ${manager.last_name} (${manager.email})` : null
          });
          
          logger.success(`Created project: ${wsProject.name}`);
        }
        
      } catch (error) {
        logger.error(`Error syncing project ${wsProject.name}: ${error.message}`);
        stats.projects.errors++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ç—á–µ—Ç
        if (!stats.detailed_report) stats.detailed_report = { actions: [] };
        stats.detailed_report.actions.push({
          action: 'error',
          type: 'project',
          id: wsProject.id,
          name: wsProject.name,
          timestamp: new Date().toISOString(),
          error: error.message
        });
      }
    }
    
  } catch (error) {
    logger.error(`Projects sync error: ${error.message}`);
    throw error;
  }
}

async function syncStages(stats) {
  try {
    const supaProjects = await supabase.getProjectsWithExternalId();
    const existingStages = await supabase.getStages();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ –º–µ—Ç–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const stageTagsMap = new Map(); // id -> name
    
    for (const project of supaProjects) {
      logger.info(`üéØ Analyzing stages for project: ${project.project_name}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ Worksection
      const wsProjects = await worksection.getProjectsWithTag();
      const wsProject = wsProjects.find(p => 
        p.id && p.id.toString() === project.external_id.toString()
      );
      
      if (wsProject && wsProject.tags) {
        // –ò—â–µ–º –º–µ—Ç–∫–∏ —Å—Ç–∞–¥–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
        Object.entries(wsProject.tags).forEach(([tagId, tagName]) => {
          if (tagName && tagName.includes('–°—Ç–∞–¥–∏—è')) {
            stageTagsMap.set(tagId, tagName);
            logger.info(`Found stage tag for project ${project.project_name}: ${tagName}`);
          }
        });
      }
    }
    
    logger.info(`Found ${stageTagsMap.size} unique stage tags`);
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏–∏
    for (const [tagId, stageName] of stageTagsMap) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–¥–∏–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "!"
        if (stageName.startsWith('!')) {
          logger.info(`üö´ Skipping stage starting with "!": ${stageName}`);
          stats.stages.skipped = (stats.stages.skipped || 0) + 1;
          continue;
        }
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é –ø–æ external_id (tag ID)
        const existing = existingStages.find(s => 
          s.external_id && s.external_id.toString() === tagId.toString()
        );
        
        if (existing) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–¥–∏—é
          const updateData = {
            stage_name: stageName,
            stage_description: `–°—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${stageName}`,
            external_updated_at: new Date().toISOString()
          };
          
          await supabase.updateStage(existing.stage_id, updateData);
          stats.stages.updated++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
          if (!stats.detailed_report) stats.detailed_report = { actions: [] };
          stats.detailed_report.actions.push({
            action: 'updated',
            type: 'stage',
            id: tagId,
            name: stageName,
            timestamp: new Date().toISOString()
          });
          
          logger.success(`Updated stage: ${stageName}`);
          
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é
          const stageData = {
            stage_name: stageName,
            stage_description: `–°—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${stageName}`,
            external_id: tagId.toString(),
            external_source: 'worksection',
            external_updated_at: new Date().toISOString()
          };
          
          await supabase.createStage(stageData);
          stats.stages.created++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
          if (!stats.detailed_report) stats.detailed_report = { actions: [] };
          stats.detailed_report.actions.push({
            action: 'created',
            type: 'stage',
            id: tagId,
            name: stageName,
            timestamp: new Date().toISOString()
          });
          
          logger.success(`Created stage: ${stageName}`);
        }
        
      } catch (error) {
        logger.error(`Error syncing stage ${stageName}: ${error.message}`);
        stats.stages.errors++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ç—á–µ—Ç
        if (!stats.detailed_report) stats.detailed_report = { actions: [] };
        stats.detailed_report.actions.push({
          action: 'error',
          type: 'stage',
          id: tagId,
          name: stageName,
          timestamp: new Date().toISOString(),
          error: error.message
        });
      }
    }
    
    logger.success(`‚úÖ Stages sync completed`);
    
  } catch (error) {
    logger.error(`Stages sync error: ${error.message}`);
    throw error;
  }
}

async function findUserByEmail(email, stats) {
  if (!email) return null;
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!stats.user_search) {
      stats.user_search = {
        total_searches: 0,
        successful_by_email: 0,
        successful_by_email_part: 0,
        successful_by_name: 0,
        successful_by_name_parts: 0,
        successful_by_fuzzy: 0,
        failed: 0,
        errors: 0,
        empty_queries: 0,
        searches: []
      };
    }
    
    stats.assignments.attempted++;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
    const user = await supabase.findUser(email, stats);
    if (user) {
      stats.assignments.successful++;
      logger.info(`üë§ Found user: ${user.first_name} ${user.last_name} (${email})`);
      return user;
    }
    
    stats.assignments.failed++;
    logger.warning(`üë§ User not found: ${email}`);
    return null;
    
  } catch (error) {
    stats.assignments.failed++;
    logger.error(`üë§ Error finding user ${email}: ${error.message}`);
    return null;
  }
}

module.exports = { syncProjects, syncStages }; 